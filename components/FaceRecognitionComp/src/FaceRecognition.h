// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `FaceRecognition.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____FaceRecognition_h__
#define ____FaceRecognition_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <MSKFace.h>
#include <MSKRGBD.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompFaceRecognition
{

class FaceRecognition;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompFaceRecognition::FaceRecognition>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompFaceRecognition::FaceRecognition*);

}

}

namespace RoboCompFaceRecognition
{

class FaceRecognition;
bool operator==(const FaceRecognition&, const FaceRecognition&);
bool operator<(const FaceRecognition&, const FaceRecognition&);
::Ice::Object* upCast(::RoboCompFaceRecognition::FaceRecognition*);
typedef ::IceInternal::Handle< ::RoboCompFaceRecognition::FaceRecognition> FaceRecognitionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompFaceRecognition::FaceRecognition> FaceRecognitionPrx;
void __patch(FaceRecognitionPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompFaceRecognition
{

struct SensedFace
{
    ::Ice::Int id;
    ::RoboCompMSKRGBD::TRGBImage faceImage;
    ::RoboCompMSKRGBD::TRGBImage faceImageNorm;
    ::RoboCompMSKFace::Eye leftEye;
    ::RoboCompMSKFace::Eye rightEye;

    bool operator==(const SensedFace& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(faceImage != __rhs.faceImage)
        {
            return false;
        }
        if(faceImageNorm != __rhs.faceImageNorm)
        {
            return false;
        }
        if(leftEye != __rhs.leftEye)
        {
            return false;
        }
        if(rightEye != __rhs.rightEye)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SensedFace& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(faceImage < __rhs.faceImage)
        {
            return true;
        }
        else if(__rhs.faceImage < faceImage)
        {
            return false;
        }
        if(faceImageNorm < __rhs.faceImageNorm)
        {
            return true;
        }
        else if(__rhs.faceImageNorm < faceImageNorm)
        {
            return false;
        }
        if(leftEye < __rhs.leftEye)
        {
            return true;
        }
        else if(__rhs.leftEye < leftEye)
        {
            return false;
        }
        if(rightEye < __rhs.rightEye)
        {
            return true;
        }
        else if(__rhs.rightEye < rightEye)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SensedFace& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SensedFace& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SensedFace& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SensedFace& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompFaceRecognition::SensedFace> SensedFaceList;

struct FaceClass
{
    ::Ice::Int fid;
    ::std::string fclass;

    bool operator==(const FaceClass& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(fid != __rhs.fid)
        {
            return false;
        }
        if(fclass != __rhs.fclass)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FaceClass& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(fid < __rhs.fid)
        {
            return true;
        }
        else if(__rhs.fid < fid)
        {
            return false;
        }
        if(fclass < __rhs.fclass)
        {
            return true;
        }
        else if(__rhs.fclass < fclass)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FaceClass& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FaceClass& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FaceClass& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FaceClass& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompFaceRecognition::FaceClass> vectorClasses;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompFaceRecognition::SensedFace>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompFaceRecognition::SensedFace, S>
{
    static void write(S* __os, const ::RoboCompFaceRecognition::SensedFace& v)
    {
        __os->write(v.id);
        __os->write(v.faceImage);
        __os->write(v.faceImageNorm);
        __os->write(v.leftEye);
        __os->write(v.rightEye);
    }
};

template<class S>
struct StreamReader< ::RoboCompFaceRecognition::SensedFace, S>
{
    static void read(S* __is, ::RoboCompFaceRecognition::SensedFace& v)
    {
        __is->read(v.id);
        __is->read(v.faceImage);
        __is->read(v.faceImageNorm);
        __is->read(v.leftEye);
        __is->read(v.rightEye);
    }
};

template<>
struct StreamableTraits< ::RoboCompFaceRecognition::FaceClass>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompFaceRecognition::FaceClass, S>
{
    static void write(S* __os, const ::RoboCompFaceRecognition::FaceClass& v)
    {
        __os->write(v.fid);
        __os->write(v.fclass);
    }
};

template<class S>
struct StreamReader< ::RoboCompFaceRecognition::FaceClass, S>
{
    static void read(S* __is, ::RoboCompFaceRecognition::FaceClass& v)
    {
        __is->read(v.fid);
        __is->read(v.fclass);
    }
};

}

namespace RoboCompFaceRecognition
{

class Callback_FaceRecognition_getClass_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FaceRecognition_getClass_Base> Callback_FaceRecognition_getClassPtr;

}

namespace IceProxy
{

namespace RoboCompFaceRecognition
{

class FaceRecognition : virtual public ::IceProxy::Ice::Object
{
public:

    ::RoboCompFaceRecognition::vectorClasses getClass()
    {
        return getClass(0);
    }
    ::RoboCompFaceRecognition::vectorClasses getClass(const ::Ice::Context& __ctx)
    {
        return getClass(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getClass(const ::IceInternal::Function<void (const ::RoboCompFaceRecognition::vectorClasses&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getClass(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getClass(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getClass(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getClass(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::RoboCompFaceRecognition::vectorClasses&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getClass(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getClass(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getClass(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getClass(const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::RoboCompFaceRecognition::vectorClasses&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompFaceRecognition::vectorClasses&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompFaceRecognition::FaceRecognitionPrx __proxy = ::RoboCompFaceRecognition::FaceRecognitionPrx::uncheckedCast(__result->getProxy());
                ::RoboCompFaceRecognition::vectorClasses __ret;
                try
                {
                    __ret = __proxy->end_getClass(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompFaceRecognition::vectorClasses&)> _response;
        };
        return begin_getClass(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getClass()
    {
        return begin_getClass(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClass(const ::Ice::Context& __ctx)
    {
        return begin_getClass(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClass(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClass(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClass(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClass(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClass(const ::RoboCompFaceRecognition::Callback_FaceRecognition_getClassPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClass(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClass(const ::Ice::Context& __ctx, const ::RoboCompFaceRecognition::Callback_FaceRecognition_getClassPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClass(&__ctx, __del, __cookie);
    }

    ::RoboCompFaceRecognition::vectorClasses end_getClass(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompFaceRecognition::vectorClasses getClass(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getClass(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_secure(bool __secure) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_twoway() const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_oneway() const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_batchOneway() const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_datagram() const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_batchDatagram() const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_compress(bool __compress) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FaceRecognition> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FaceRecognition*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompFaceRecognition
{

class FaceRecognition : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::RoboCompFaceRecognition::vectorClasses getClass(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompFaceRecognition
{

class FaceRecognition : virtual public ::IceDelegate::RoboCompFaceRecognition::FaceRecognition,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::RoboCompFaceRecognition::vectorClasses getClass(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompFaceRecognition
{

class FaceRecognition : virtual public ::IceDelegate::RoboCompFaceRecognition::FaceRecognition,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::RoboCompFaceRecognition::vectorClasses getClass(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompFaceRecognition
{

class FaceRecognition : virtual public ::Ice::Object
{
public:

    typedef FaceRecognitionPrx ProxyType;
    typedef FaceRecognitionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RoboCompFaceRecognition::vectorClasses getClass(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getClass(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FaceRecognition& l, const FaceRecognition& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FaceRecognition& l, const FaceRecognition& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompFaceRecognition
{

template<class T>
class CallbackNC_FaceRecognition_getClass : public Callback_FaceRecognition_getClass_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompFaceRecognition::vectorClasses&);

    CallbackNC_FaceRecognition_getClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompFaceRecognition::FaceRecognitionPrx __proxy = ::RoboCompFaceRecognition::FaceRecognitionPrx::uncheckedCast(__result->getProxy());
        ::RoboCompFaceRecognition::vectorClasses __ret;
        try
        {
            __ret = __proxy->end_getClass(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FaceRecognition_getClassPtr
newCallback_FaceRecognition_getClass(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFaceRecognition::vectorClasses&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FaceRecognition_getClass<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FaceRecognition_getClassPtr
newCallback_FaceRecognition_getClass(T* instance, void (T::*cb)(const ::RoboCompFaceRecognition::vectorClasses&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FaceRecognition_getClass<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FaceRecognition_getClass : public Callback_FaceRecognition_getClass_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompFaceRecognition::vectorClasses&, const CT&);

    Callback_FaceRecognition_getClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompFaceRecognition::FaceRecognitionPrx __proxy = ::RoboCompFaceRecognition::FaceRecognitionPrx::uncheckedCast(__result->getProxy());
        ::RoboCompFaceRecognition::vectorClasses __ret;
        try
        {
            __ret = __proxy->end_getClass(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FaceRecognition_getClassPtr
newCallback_FaceRecognition_getClass(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFaceRecognition::vectorClasses&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FaceRecognition_getClass<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FaceRecognition_getClassPtr
newCallback_FaceRecognition_getClass(T* instance, void (T::*cb)(const ::RoboCompFaceRecognition::vectorClasses&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FaceRecognition_getClass<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
