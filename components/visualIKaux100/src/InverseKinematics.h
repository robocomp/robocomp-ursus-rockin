// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `InverseKinematics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____InverseKinematics_h__
#define ____InverseKinematics_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompInverseKinematics
{

class InverseKinematics;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompInverseKinematics::InverseKinematics>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompInverseKinematics::InverseKinematics*);

}

}

namespace RoboCompInverseKinematics
{

class InverseKinematics;
bool operator==(const InverseKinematics&, const InverseKinematics&);
bool operator<(const InverseKinematics&, const InverseKinematics&);
::Ice::Object* upCast(::RoboCompInverseKinematics::InverseKinematics*);
typedef ::IceInternal::Handle< ::RoboCompInverseKinematics::InverseKinematics> InverseKinematicsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompInverseKinematics::InverseKinematics> InverseKinematicsPrx;
void __patch(InverseKinematicsPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompInverseKinematics
{

class IKException : public ::Ice::UserException
{
public:

    IKException() {}
    explicit IKException(const ::std::string&);
    virtual ~IKException() throw();

    virtual ::std::string ice_name() const;
    virtual IKException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string text;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static IKException __IKException_init;

struct Pose6D
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;

    bool operator==(const Pose6D& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        if(rx != __rhs.rx)
        {
            return false;
        }
        if(ry != __rhs.ry)
        {
            return false;
        }
        if(rz != __rhs.rz)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Pose6D& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        if(rx < __rhs.rx)
        {
            return true;
        }
        else if(__rhs.rx < rx)
        {
            return false;
        }
        if(ry < __rhs.ry)
        {
            return true;
        }
        else if(__rhs.ry < ry)
        {
            return false;
        }
        if(rz < __rhs.rz)
        {
            return true;
        }
        else if(__rhs.rz < rz)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Pose6D& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Pose6D& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Pose6D& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Pose6D& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct WeightVector
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;

    bool operator==(const WeightVector& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        if(rx != __rhs.rx)
        {
            return false;
        }
        if(ry != __rhs.ry)
        {
            return false;
        }
        if(rz != __rhs.rz)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WeightVector& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        if(rx < __rhs.rx)
        {
            return true;
        }
        else if(__rhs.rx < rx)
        {
            return false;
        }
        if(ry < __rhs.ry)
        {
            return true;
        }
        else if(__rhs.ry < ry)
        {
            return false;
        }
        if(rz < __rhs.rz)
        {
            return true;
        }
        else if(__rhs.rz < rz)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WeightVector& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const WeightVector& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const WeightVector& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const WeightVector& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Axis
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;

    bool operator==(const Axis& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Axis& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Axis& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Axis& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Axis& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Axis& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Motor
{
    ::std::string name;
    ::Ice::Float angle;

    bool operator==(const Motor& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(angle != __rhs.angle)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Motor& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(angle < __rhs.angle)
        {
            return true;
        }
        else if(__rhs.angle < angle)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Motor& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Motor& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Motor& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Motor& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompInverseKinematics::Motor> MotorList;

struct TargetState
{
    bool finish;
    ::std::string state;
    ::Ice::Int elapsedTime;
    ::Ice::Float errorT;
    ::Ice::Float errorR;
    ::RoboCompInverseKinematics::MotorList motors;

    bool operator==(const TargetState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(finish != __rhs.finish)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        if(elapsedTime != __rhs.elapsedTime)
        {
            return false;
        }
        if(errorT != __rhs.errorT)
        {
            return false;
        }
        if(errorR != __rhs.errorR)
        {
            return false;
        }
        if(motors != __rhs.motors)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TargetState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(finish < __rhs.finish)
        {
            return true;
        }
        else if(__rhs.finish < finish)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        if(elapsedTime < __rhs.elapsedTime)
        {
            return true;
        }
        else if(__rhs.elapsedTime < elapsedTime)
        {
            return false;
        }
        if(errorT < __rhs.errorT)
        {
            return true;
        }
        else if(__rhs.errorT < errorT)
        {
            return false;
        }
        if(errorR < __rhs.errorR)
        {
            return true;
        }
        else if(__rhs.errorR < errorR)
        {
            return false;
        }
        if(motors < __rhs.motors)
        {
            return true;
        }
        else if(__rhs.motors < motors)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TargetState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TargetState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TargetState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TargetState& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompInverseKinematics::IKException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompInverseKinematics::Pose6D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompInverseKinematics::Pose6D, S>
{
    static void write(S* __os, const ::RoboCompInverseKinematics::Pose6D& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.rx);
        __os->write(v.ry);
        __os->write(v.rz);
    }
};

template<class S>
struct StreamReader< ::RoboCompInverseKinematics::Pose6D, S>
{
    static void read(S* __is, ::RoboCompInverseKinematics::Pose6D& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.rx);
        __is->read(v.ry);
        __is->read(v.rz);
    }
};

template<>
struct StreamableTraits< ::RoboCompInverseKinematics::WeightVector>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompInverseKinematics::WeightVector, S>
{
    static void write(S* __os, const ::RoboCompInverseKinematics::WeightVector& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.rx);
        __os->write(v.ry);
        __os->write(v.rz);
    }
};

template<class S>
struct StreamReader< ::RoboCompInverseKinematics::WeightVector, S>
{
    static void read(S* __is, ::RoboCompInverseKinematics::WeightVector& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.rx);
        __is->read(v.ry);
        __is->read(v.rz);
    }
};

template<>
struct StreamableTraits< ::RoboCompInverseKinematics::Axis>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompInverseKinematics::Axis, S>
{
    static void write(S* __os, const ::RoboCompInverseKinematics::Axis& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::RoboCompInverseKinematics::Axis, S>
{
    static void read(S* __is, ::RoboCompInverseKinematics::Axis& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

template<>
struct StreamableTraits< ::RoboCompInverseKinematics::Motor>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInverseKinematics::Motor, S>
{
    static void write(S* __os, const ::RoboCompInverseKinematics::Motor& v)
    {
        __os->write(v.name);
        __os->write(v.angle);
    }
};

template<class S>
struct StreamReader< ::RoboCompInverseKinematics::Motor, S>
{
    static void read(S* __is, ::RoboCompInverseKinematics::Motor& v)
    {
        __is->read(v.name);
        __is->read(v.angle);
    }
};

template<>
struct StreamableTraits< ::RoboCompInverseKinematics::TargetState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompInverseKinematics::TargetState, S>
{
    static void write(S* __os, const ::RoboCompInverseKinematics::TargetState& v)
    {
        __os->write(v.finish);
        __os->write(v.state);
        __os->write(v.elapsedTime);
        __os->write(v.errorT);
        __os->write(v.errorR);
        __os->write(v.motors);
    }
};

template<class S>
struct StreamReader< ::RoboCompInverseKinematics::TargetState, S>
{
    static void read(S* __is, ::RoboCompInverseKinematics::TargetState& v)
    {
        __is->read(v.finish);
        __is->read(v.state);
        __is->read(v.elapsedTime);
        __is->read(v.errorT);
        __is->read(v.errorR);
        __is->read(v.motors);
    }
};

}

namespace RoboCompInverseKinematics
{

class Callback_InverseKinematics_getTargetState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_getTargetState_Base> Callback_InverseKinematics_getTargetStatePtr;

class Callback_InverseKinematics_setTargetPose6D_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_setTargetPose6D_Base> Callback_InverseKinematics_setTargetPose6DPtr;

class Callback_InverseKinematics_setTargetAlignaxis_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_setTargetAlignaxis_Base> Callback_InverseKinematics_setTargetAlignaxisPtr;

class Callback_InverseKinematics_setTargetAdvanceAxis_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_setTargetAdvanceAxis_Base> Callback_InverseKinematics_setTargetAdvanceAxisPtr;

class Callback_InverseKinematics_getPartState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_getPartState_Base> Callback_InverseKinematics_getPartStatePtr;

class Callback_InverseKinematics_goHome_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_goHome_Base> Callback_InverseKinematics_goHomePtr;

class Callback_InverseKinematics_stop_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_stop_Base> Callback_InverseKinematics_stopPtr;

class Callback_InverseKinematics_setJoint_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_setJoint_Base> Callback_InverseKinematics_setJointPtr;

class Callback_InverseKinematics_setFingers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InverseKinematics_setFingers_Base> Callback_InverseKinematics_setFingersPtr;

}

namespace IceProxy
{

namespace RoboCompInverseKinematics
{

class InverseKinematics : virtual public ::IceProxy::Ice::Object
{
public:

    ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID)
    {
        return getTargetState(bodyPart, targetID, 0);
    }
    ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context& __ctx)
    {
        return getTargetState(bodyPart, targetID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::IceInternal::Function<void (const ::RoboCompInverseKinematics::TargetState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTargetState(bodyPart, targetID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTargetState(bodyPart, targetID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompInverseKinematics::TargetState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTargetState(bodyPart, targetID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTargetState(bodyPart, targetID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompInverseKinematics::TargetState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompInverseKinematics::TargetState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                ::RoboCompInverseKinematics::TargetState __ret;
                try
                {
                    __ret = __proxy->end_getTargetState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompInverseKinematics::TargetState&)> _response;
        };
        return begin_getTargetState(bodyPart, targetID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID)
    {
        return begin_getTargetState(bodyPart, targetID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context& __ctx)
    {
        return begin_getTargetState(bodyPart, targetID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTargetState(bodyPart, targetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTargetState(bodyPart, targetID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::RoboCompInverseKinematics::Callback_InverseKinematics_getTargetStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTargetState(bodyPart, targetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string& bodyPart, ::Ice::Int targetID, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_getTargetStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTargetState(bodyPart, targetID, &__ctx, __del, __cookie);
    }

    ::RoboCompInverseKinematics::TargetState end_getTargetState(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTargetState(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights)
    {
        return setTargetPose6D(bodyPart, target, weights, 0);
    }
    ::Ice::Int setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context& __ctx)
    {
        return setTargetPose6D(bodyPart, target, weights, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTargetPose6D(bodyPart, target, weights, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTargetPose6D(bodyPart, target, weights, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTargetPose6D(bodyPart, target, weights, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTargetPose6D(bodyPart, target, weights, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_setTargetPose6D(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_setTargetPose6D(bodyPart, target, weights, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights)
    {
        return begin_setTargetPose6D(bodyPart, target, weights, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context& __ctx)
    {
        return begin_setTargetPose6D(bodyPart, target, weights, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetPose6D(bodyPart, target, weights, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetPose6D(bodyPart, target, weights, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setTargetPose6DPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetPose6D(bodyPart, target, weights, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::WeightVector& weights, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setTargetPose6DPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetPose6D(bodyPart, target, weights, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setTargetPose6D(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setTargetPose6D(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::WeightVector&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTargetPose6D(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::WeightVector&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax)
    {
        return setTargetAlignaxis(bodyPart, target, ax, 0);
    }
    ::Ice::Int setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context& __ctx)
    {
        return setTargetAlignaxis(bodyPart, target, ax, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTargetAlignaxis(bodyPart, target, ax, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTargetAlignaxis(bodyPart, target, ax, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_setTargetAlignaxis(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_setTargetAlignaxis(bodyPart, target, ax, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax)
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context& __ctx)
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setTargetAlignaxisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Pose6D& target, const ::RoboCompInverseKinematics::Axis& ax, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setTargetAlignaxisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAlignaxis(bodyPart, target, ax, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setTargetAlignaxis(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setTargetAlignaxis(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::Axis&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTargetAlignaxis(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::Axis&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist)
    {
        return setTargetAdvanceAxis(bodyPart, ax, dist, 0);
    }
    ::Ice::Int setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context& __ctx)
    {
        return setTargetAdvanceAxis(bodyPart, ax, dist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTargetAdvanceAxis(bodyPart, ax, dist, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTargetAdvanceAxis(bodyPart, ax, dist, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_setTargetAdvanceAxis(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist)
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context& __ctx)
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setTargetAdvanceAxisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Axis& ax, ::Ice::Float dist, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setTargetAdvanceAxisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTargetAdvanceAxis(bodyPart, ax, dist, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setTargetAdvanceAxis(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setTargetAdvanceAxis(const ::std::string&, const ::RoboCompInverseKinematics::Axis&, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTargetAdvanceAxis(const ::std::string&, const ::RoboCompInverseKinematics::Axis&, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getPartState(const ::std::string& bodyPart)
    {
        return getPartState(bodyPart, 0);
    }
    bool getPartState(const ::std::string& bodyPart, const ::Ice::Context& __ctx)
    {
        return getPartState(bodyPart, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPartState(const ::std::string& bodyPart, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPartState(bodyPart, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPartState(const ::std::string& bodyPart, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPartState(bodyPart, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPartState(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPartState(bodyPart, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPartState(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPartState(bodyPart, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPartState(const ::std::string& bodyPart, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_getPartState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_getPartState(bodyPart, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string& bodyPart)
    {
        return begin_getPartState(bodyPart, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string& bodyPart, const ::Ice::Context& __ctx)
    {
        return begin_getPartState(bodyPart, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string& bodyPart, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartState(bodyPart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartState(bodyPart, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Callback_InverseKinematics_getPartStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartState(bodyPart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_getPartStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartState(bodyPart, &__ctx, __del, __cookie);
    }

    bool end_getPartState(const ::Ice::AsyncResultPtr&);
    
private:

    bool getPartState(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPartState(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void goHome(const ::std::string& bodyPart)
    {
        goHome(bodyPart, 0);
    }
    void goHome(const ::std::string& bodyPart, const ::Ice::Context& __ctx)
    {
        goHome(bodyPart, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_goHome(const ::std::string& bodyPart, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goHome(bodyPart, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goHome(const ::std::string& bodyPart, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goHome(bodyPart, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_goHome(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goHome(bodyPart, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goHome(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goHome(bodyPart, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_goHome(const ::std::string& bodyPart, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_goHome(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_goHome(bodyPart, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_goHome(const ::std::string& bodyPart)
    {
        return begin_goHome(bodyPart, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goHome(const ::std::string& bodyPart, const ::Ice::Context& __ctx)
    {
        return begin_goHome(bodyPart, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goHome(const ::std::string& bodyPart, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goHome(bodyPart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goHome(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goHome(bodyPart, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goHome(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Callback_InverseKinematics_goHomePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goHome(bodyPart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goHome(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_goHomePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goHome(bodyPart, &__ctx, __del, __cookie);
    }

    void end_goHome(const ::Ice::AsyncResultPtr&);
    
private:

    void goHome(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_goHome(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stop(const ::std::string& bodyPart)
    {
        stop(bodyPart, 0);
    }
    void stop(const ::std::string& bodyPart, const ::Ice::Context& __ctx)
    {
        stop(bodyPart, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stop(const ::std::string& bodyPart, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stop(bodyPart, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::std::string& bodyPart, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stop(bodyPart, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stop(bodyPart, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stop(bodyPart, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_stop(const ::std::string& bodyPart, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_stop(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_stop(bodyPart, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_stop(const ::std::string& bodyPart)
    {
        return begin_stop(bodyPart, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::std::string& bodyPart, const ::Ice::Context& __ctx)
    {
        return begin_stop(bodyPart, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::std::string& bodyPart, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(bodyPart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(bodyPart, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::std::string& bodyPart, const ::RoboCompInverseKinematics::Callback_InverseKinematics_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(bodyPart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::std::string& bodyPart, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(bodyPart, &__ctx, __del, __cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr&);
    
private:

    void stop(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stop(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed)
    {
        setJoint(joint, angle, maxSpeed, 0);
    }
    void setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context& __ctx)
    {
        setJoint(joint, angle, maxSpeed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setJoint(joint, angle, maxSpeed, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setJoint(joint, angle, maxSpeed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setJoint(joint, angle, maxSpeed, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setJoint(joint, angle, maxSpeed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setJoint(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setJoint(joint, angle, maxSpeed, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed)
    {
        return begin_setJoint(joint, angle, maxSpeed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context& __ctx)
    {
        return begin_setJoint(joint, angle, maxSpeed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setJoint(joint, angle, maxSpeed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setJoint(joint, angle, maxSpeed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setJointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setJoint(joint, angle, maxSpeed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string& joint, ::Ice::Float angle, ::Ice::Float maxSpeed, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setJointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setJoint(joint, angle, maxSpeed, &__ctx, __del, __cookie);
    }

    void end_setJoint(const ::Ice::AsyncResultPtr&);
    
private:

    void setJoint(const ::std::string&, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setJoint(const ::std::string&, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFingers(::Ice::Float d)
    {
        setFingers(d, 0);
    }
    void setFingers(::Ice::Float d, const ::Ice::Context& __ctx)
    {
        setFingers(d, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFingers(::Ice::Float d, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setFingers(d, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setFingers(::Ice::Float d, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFingers(d, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFingers(::Ice::Float d, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setFingers(d, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setFingers(::Ice::Float d, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFingers(d, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setFingers(::Ice::Float d, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setFingers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setFingers(d, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float d)
    {
        return begin_setFingers(d, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float d, const ::Ice::Context& __ctx)
    {
        return begin_setFingers(d, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float d, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFingers(d, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float d, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFingers(d, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float d, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setFingersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFingers(d, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float d, const ::Ice::Context& __ctx, const ::RoboCompInverseKinematics::Callback_InverseKinematics_setFingersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFingers(d, &__ctx, __del, __cookie);
    }

    void end_setFingers(const ::Ice::AsyncResultPtr&);
    
private:

    void setFingers(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFingers(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_secure(bool __secure) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_twoway() const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_oneway() const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_batchOneway() const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_datagram() const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_batchDatagram() const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_compress(bool __compress) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InverseKinematics> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InverseKinematics*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompInverseKinematics
{

class InverseKinematics : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int setTargetPose6D(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::WeightVector&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int setTargetAlignaxis(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::Axis&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int setTargetAdvanceAxis(const ::std::string&, const ::RoboCompInverseKinematics::Axis&, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getPartState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void goHome(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stop(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setJoint(const ::std::string&, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFingers(::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompInverseKinematics
{

class InverseKinematics : virtual public ::IceDelegate::RoboCompInverseKinematics::InverseKinematics,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setTargetPose6D(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::WeightVector&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setTargetAlignaxis(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::Axis&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setTargetAdvanceAxis(const ::std::string&, const ::RoboCompInverseKinematics::Axis&, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getPartState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void goHome(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stop(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setJoint(const ::std::string&, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFingers(::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompInverseKinematics
{

class InverseKinematics : virtual public ::IceDelegate::RoboCompInverseKinematics::InverseKinematics,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setTargetPose6D(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::WeightVector&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setTargetAlignaxis(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::Axis&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int setTargetAdvanceAxis(const ::std::string&, const ::RoboCompInverseKinematics::Axis&, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getPartState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void goHome(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stop(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setJoint(const ::std::string&, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFingers(::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompInverseKinematics
{

class InverseKinematics : virtual public ::Ice::Object
{
public:

    typedef InverseKinematicsPrx ProxyType;
    typedef InverseKinematicsPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RoboCompInverseKinematics::TargetState getTargetState(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTargetState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setTargetPose6D(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::WeightVector&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTargetPose6D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setTargetAlignaxis(const ::std::string&, const ::RoboCompInverseKinematics::Pose6D&, const ::RoboCompInverseKinematics::Axis&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTargetAlignaxis(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setTargetAdvanceAxis(const ::std::string&, const ::RoboCompInverseKinematics::Axis&, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTargetAdvanceAxis(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getPartState(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPartState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void goHome(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___goHome(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stop(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stop(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setJoint(const ::std::string&, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setJoint(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFingers(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFingers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const InverseKinematics& l, const InverseKinematics& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InverseKinematics& l, const InverseKinematics& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompInverseKinematics
{

template<class T>
class CallbackNC_InverseKinematics_getTargetState : public Callback_InverseKinematics_getTargetState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompInverseKinematics::TargetState&);

    CallbackNC_InverseKinematics_getTargetState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInverseKinematics::TargetState __ret;
        try
        {
            __ret = __proxy->end_getTargetState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_getTargetStatePtr
newCallback_InverseKinematics_getTargetState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompInverseKinematics::TargetState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_getTargetState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_getTargetStatePtr
newCallback_InverseKinematics_getTargetState(T* instance, void (T::*cb)(const ::RoboCompInverseKinematics::TargetState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_getTargetState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_getTargetState : public Callback_InverseKinematics_getTargetState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompInverseKinematics::TargetState&, const CT&);

    Callback_InverseKinematics_getTargetState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::RoboCompInverseKinematics::TargetState __ret;
        try
        {
            __ret = __proxy->end_getTargetState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_getTargetStatePtr
newCallback_InverseKinematics_getTargetState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompInverseKinematics::TargetState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_getTargetState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_getTargetStatePtr
newCallback_InverseKinematics_getTargetState(T* instance, void (T::*cb)(const ::RoboCompInverseKinematics::TargetState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_getTargetState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_setTargetPose6D : public Callback_InverseKinematics_setTargetPose6D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_InverseKinematics_setTargetPose6D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setTargetPose6D(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_setTargetPose6DPtr
newCallback_InverseKinematics_setTargetPose6D(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setTargetPose6D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setTargetPose6DPtr
newCallback_InverseKinematics_setTargetPose6D(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setTargetPose6D<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_setTargetPose6D : public Callback_InverseKinematics_setTargetPose6D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_InverseKinematics_setTargetPose6D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setTargetPose6D(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_setTargetPose6DPtr
newCallback_InverseKinematics_setTargetPose6D(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setTargetPose6D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setTargetPose6DPtr
newCallback_InverseKinematics_setTargetPose6D(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setTargetPose6D<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_setTargetAlignaxis : public Callback_InverseKinematics_setTargetAlignaxis_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_InverseKinematics_setTargetAlignaxis(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setTargetAlignaxis(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_setTargetAlignaxisPtr
newCallback_InverseKinematics_setTargetAlignaxis(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setTargetAlignaxis<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setTargetAlignaxisPtr
newCallback_InverseKinematics_setTargetAlignaxis(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setTargetAlignaxis<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_setTargetAlignaxis : public Callback_InverseKinematics_setTargetAlignaxis_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_InverseKinematics_setTargetAlignaxis(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setTargetAlignaxis(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_setTargetAlignaxisPtr
newCallback_InverseKinematics_setTargetAlignaxis(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setTargetAlignaxis<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setTargetAlignaxisPtr
newCallback_InverseKinematics_setTargetAlignaxis(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setTargetAlignaxis<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_setTargetAdvanceAxis : public Callback_InverseKinematics_setTargetAdvanceAxis_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_InverseKinematics_setTargetAdvanceAxis(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setTargetAdvanceAxis(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_setTargetAdvanceAxisPtr
newCallback_InverseKinematics_setTargetAdvanceAxis(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setTargetAdvanceAxis<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setTargetAdvanceAxisPtr
newCallback_InverseKinematics_setTargetAdvanceAxis(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setTargetAdvanceAxis<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_setTargetAdvanceAxis : public Callback_InverseKinematics_setTargetAdvanceAxis_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_InverseKinematics_setTargetAdvanceAxis(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setTargetAdvanceAxis(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_setTargetAdvanceAxisPtr
newCallback_InverseKinematics_setTargetAdvanceAxis(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setTargetAdvanceAxis<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setTargetAdvanceAxisPtr
newCallback_InverseKinematics_setTargetAdvanceAxis(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setTargetAdvanceAxis<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_getPartState : public Callback_InverseKinematics_getPartState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_InverseKinematics_getPartState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getPartState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_getPartStatePtr
newCallback_InverseKinematics_getPartState(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_getPartState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_getPartStatePtr
newCallback_InverseKinematics_getPartState(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_getPartState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_getPartState : public Callback_InverseKinematics_getPartState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_InverseKinematics_getPartState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getPartState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_getPartStatePtr
newCallback_InverseKinematics_getPartState(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_getPartState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_getPartStatePtr
newCallback_InverseKinematics_getPartState(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_getPartState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_goHome : public Callback_InverseKinematics_goHome_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InverseKinematics_goHome(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_goHome(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_goHome<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_goHome<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_goHome<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_goHome<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_goHome : public Callback_InverseKinematics_goHome_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InverseKinematics_goHome(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_goHome(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_goHome<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_goHome<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_goHome<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_goHomePtr
newCallback_InverseKinematics_goHome(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_goHome<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_stop : public Callback_InverseKinematics_stop_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InverseKinematics_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stop(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_stop<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_stop<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_stop : public Callback_InverseKinematics_stop_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InverseKinematics_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stop(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_stopPtr
newCallback_InverseKinematics_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_setJoint : public Callback_InverseKinematics_setJoint_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InverseKinematics_setJoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setJoint(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setJoint<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setJoint<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setJoint<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setJoint<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_setJoint : public Callback_InverseKinematics_setJoint_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InverseKinematics_setJoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setJoint(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setJoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setJoint<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setJoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setJointPtr
newCallback_InverseKinematics_setJoint(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setJoint<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_InverseKinematics_setFingers : public Callback_InverseKinematics_setFingers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InverseKinematics_setFingers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setFingers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setFingers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setFingers<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setFingers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InverseKinematics_setFingers<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InverseKinematics_setFingers : public Callback_InverseKinematics_setFingers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InverseKinematics_setFingers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompInverseKinematics::InverseKinematicsPrx __proxy = ::RoboCompInverseKinematics::InverseKinematicsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setFingers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setFingers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setFingers<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setFingers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InverseKinematics_setFingersPtr
newCallback_InverseKinematics_setFingers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InverseKinematics_setFingers<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
