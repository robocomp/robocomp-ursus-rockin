// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TrajectoryRobot2D.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____TrajectoryRobot2D_h__
#define ____TrajectoryRobot2D_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*);

}

}

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D;
bool operator==(const TrajectoryRobot2D&, const TrajectoryRobot2D&);
bool operator<(const TrajectoryRobot2D&, const TrajectoryRobot2D&);
::Ice::Object* upCast(::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*);
typedef ::IceInternal::Handle< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D> TrajectoryRobot2DPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D> TrajectoryRobot2DPrx;
void __patch(TrajectoryRobot2DPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompTrajectoryRobot2D
{

class RoboCompException : public ::Ice::UserException
{
public:

    RoboCompException() {}
    explicit RoboCompException(const ::std::string&);
    virtual ~RoboCompException() throw();

    virtual ::std::string ice_name() const;
    virtual RoboCompException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string text;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static RoboCompException __RoboCompException_init;

struct TargetPose
{
    bool doRotation;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;

    bool operator==(const TargetPose& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(doRotation != __rhs.doRotation)
        {
            return false;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        if(rx != __rhs.rx)
        {
            return false;
        }
        if(ry != __rhs.ry)
        {
            return false;
        }
        if(rz != __rhs.rz)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TargetPose& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(doRotation < __rhs.doRotation)
        {
            return true;
        }
        else if(__rhs.doRotation < doRotation)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        if(rx < __rhs.rx)
        {
            return true;
        }
        else if(__rhs.rx < rx)
        {
            return false;
        }
        if(ry < __rhs.ry)
        {
            return true;
        }
        else if(__rhs.ry < ry)
        {
            return false;
        }
        if(rz < __rhs.rz)
        {
            return true;
        }
        else if(__rhs.rz < rz)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TargetPose& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TargetPose& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TargetPose& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TargetPose& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct NavState
{
    ::Ice::Float x;
    ::Ice::Float z;
    ::Ice::Float ang;
    ::Ice::Float advV;
    ::Ice::Float rotV;
    ::Ice::Float distanceToTarget;
    ::Ice::Long elapsedTime;
    ::Ice::Long estimatedTime;
    ::Ice::Long planningTime;
    ::std::string state;

    bool operator==(const NavState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        if(ang != __rhs.ang)
        {
            return false;
        }
        if(advV != __rhs.advV)
        {
            return false;
        }
        if(rotV != __rhs.rotV)
        {
            return false;
        }
        if(distanceToTarget != __rhs.distanceToTarget)
        {
            return false;
        }
        if(elapsedTime != __rhs.elapsedTime)
        {
            return false;
        }
        if(estimatedTime != __rhs.estimatedTime)
        {
            return false;
        }
        if(planningTime != __rhs.planningTime)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const NavState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        if(ang < __rhs.ang)
        {
            return true;
        }
        else if(__rhs.ang < ang)
        {
            return false;
        }
        if(advV < __rhs.advV)
        {
            return true;
        }
        else if(__rhs.advV < advV)
        {
            return false;
        }
        if(rotV < __rhs.rotV)
        {
            return true;
        }
        else if(__rhs.rotV < rotV)
        {
            return false;
        }
        if(distanceToTarget < __rhs.distanceToTarget)
        {
            return true;
        }
        else if(__rhs.distanceToTarget < distanceToTarget)
        {
            return false;
        }
        if(elapsedTime < __rhs.elapsedTime)
        {
            return true;
        }
        else if(__rhs.elapsedTime < elapsedTime)
        {
            return false;
        }
        if(estimatedTime < __rhs.estimatedTime)
        {
            return true;
        }
        else if(__rhs.estimatedTime < estimatedTime)
        {
            return false;
        }
        if(planningTime < __rhs.planningTime)
        {
            return true;
        }
        else if(__rhs.planningTime < planningTime)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const NavState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const NavState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const NavState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const NavState& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::std::string> NavigationParameterMap;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompTrajectoryRobot2D::RoboCompException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompTrajectoryRobot2D::TargetPose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 25;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompTrajectoryRobot2D::TargetPose, S>
{
    static void write(S* __os, const ::RoboCompTrajectoryRobot2D::TargetPose& v)
    {
        __os->write(v.doRotation);
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.rx);
        __os->write(v.ry);
        __os->write(v.rz);
    }
};

template<class S>
struct StreamReader< ::RoboCompTrajectoryRobot2D::TargetPose, S>
{
    static void read(S* __is, ::RoboCompTrajectoryRobot2D::TargetPose& v)
    {
        __is->read(v.doRotation);
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.rx);
        __is->read(v.ry);
        __is->read(v.rz);
    }
};

template<>
struct StreamableTraits< ::RoboCompTrajectoryRobot2D::NavState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 49;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompTrajectoryRobot2D::NavState, S>
{
    static void write(S* __os, const ::RoboCompTrajectoryRobot2D::NavState& v)
    {
        __os->write(v.x);
        __os->write(v.z);
        __os->write(v.ang);
        __os->write(v.advV);
        __os->write(v.rotV);
        __os->write(v.distanceToTarget);
        __os->write(v.elapsedTime);
        __os->write(v.estimatedTime);
        __os->write(v.planningTime);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::RoboCompTrajectoryRobot2D::NavState, S>
{
    static void read(S* __is, ::RoboCompTrajectoryRobot2D::NavState& v)
    {
        __is->read(v.x);
        __is->read(v.z);
        __is->read(v.ang);
        __is->read(v.advV);
        __is->read(v.rotV);
        __is->read(v.distanceToTarget);
        __is->read(v.elapsedTime);
        __is->read(v.estimatedTime);
        __is->read(v.planningTime);
        __is->read(v.state);
    }
};

}

namespace RoboCompTrajectoryRobot2D
{

class Callback_TrajectoryRobot2D_go_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_go_Base> Callback_TrajectoryRobot2D_goPtr;

class Callback_TrajectoryRobot2D_goReferenced_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_goReferenced_Base> Callback_TrajectoryRobot2D_goReferencedPtr;

class Callback_TrajectoryRobot2D_goBackwards_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_goBackwards_Base> Callback_TrajectoryRobot2D_goBackwardsPtr;

class Callback_TrajectoryRobot2D_changeTarget_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_changeTarget_Base> Callback_TrajectoryRobot2D_changeTargetPtr;

class Callback_TrajectoryRobot2D_getState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_getState_Base> Callback_TrajectoryRobot2D_getStatePtr;

class Callback_TrajectoryRobot2D_stop_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_stop_Base> Callback_TrajectoryRobot2D_stopPtr;

class Callback_TrajectoryRobot2D_mapBasedTarget_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TrajectoryRobot2D_mapBasedTarget_Base> Callback_TrajectoryRobot2D_mapBasedTargetPtr;

}

namespace IceProxy
{

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose& target)
    {
        return go(target, 0);
    }
    ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx)
    {
        return go(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_go(target, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_go(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_go(target, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_go(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_go(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_go(target, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target)
    {
        return begin_go(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx)
    {
        return begin_go(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_go(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_go(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_goPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_go(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_goPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_go(target, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_go(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold)
    {
        return goReferenced(target, xRef, zRef, threshold, 0);
    }
    ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context& __ctx)
    {
        return goReferenced(target, xRef, zRef, threshold, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goReferenced(target, xRef, zRef, threshold, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goReferenced(target, xRef, zRef, threshold, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goReferenced(target, xRef, zRef, threshold, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goReferenced(target, xRef, zRef, threshold, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_goReferenced(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_goReferenced(target, xRef, zRef, threshold, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold)
    {
        return begin_goReferenced(target, xRef, zRef, threshold, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context& __ctx)
    {
        return begin_goReferenced(target, xRef, zRef, threshold, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goReferenced(target, xRef, zRef, threshold, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goReferenced(target, xRef, zRef, threshold, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_goReferencedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goReferenced(target, xRef, zRef, threshold, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_goReferencedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goReferenced(target, xRef, zRef, threshold, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_goReferenced(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target)
    {
        return goBackwards(target, 0);
    }
    ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx)
    {
        return goBackwards(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goBackwards(target, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goBackwards(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goBackwards(target, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goBackwards(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_goBackwards(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_goBackwards(target, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target)
    {
        return begin_goBackwards(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx)
    {
        return begin_goBackwards(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goBackwards(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goBackwards(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_goBackwardsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goBackwards(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_goBackwardsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goBackwards(target, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_goBackwards(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target)
    {
        return changeTarget(target, 0);
    }
    ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx)
    {
        return changeTarget(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeTarget(target, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeTarget(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeTarget(target, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeTarget(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Float)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
                ::Ice::Float __ret;
                try
                {
                    __ret = __proxy->end_changeTarget(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Float)> _response;
        };
        return begin_changeTarget(target, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target)
    {
        return begin_changeTarget(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx)
    {
        return begin_changeTarget(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeTarget(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeTarget(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_changeTargetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeTarget(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_changeTargetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeTarget(target, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_changeTarget(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompTrajectoryRobot2D::NavState getState()
    {
        return getState(0);
    }
    ::RoboCompTrajectoryRobot2D::NavState getState(const ::Ice::Context& __ctx)
    {
        return getState(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getState(const ::IceInternal::Function<void (const ::RoboCompTrajectoryRobot2D::NavState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompTrajectoryRobot2D::NavState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompTrajectoryRobot2D::NavState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompTrajectoryRobot2D::NavState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
                ::RoboCompTrajectoryRobot2D::NavState __ret;
                try
                {
                    __ret = __proxy->end_getState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompTrajectoryRobot2D::NavState&)> _response;
        };
        return begin_getState(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getState()
    {
        return begin_getState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx)
    {
        return begin_getState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(&__ctx, __del, __cookie);
    }

    ::RoboCompTrajectoryRobot2D::NavState end_getState(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompTrajectoryRobot2D::NavState getState(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stop()
    {
        stop(0);
    }
    void stop(const ::Ice::Context& __ctx)
    {
        stop(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stop(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stop(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stop(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stop(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stop(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stop()
    {
        return begin_stop(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx)
    {
        return begin_stop(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(&__ctx, __del, __cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr&);
    
private:

    void stop(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters)
    {
        mapBasedTarget(parameters, 0);
    }
    void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context& __ctx)
    {
        mapBasedTarget(parameters, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_mapBasedTarget(parameters, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_mapBasedTarget(parameters, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_mapBasedTarget(parameters, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_mapBasedTarget(parameters, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters)
    {
        return begin_mapBasedTarget(parameters, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context& __ctx)
    {
        return begin_mapBasedTarget(parameters, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_mapBasedTarget(parameters, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_mapBasedTarget(parameters, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_mapBasedTargetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_mapBasedTarget(parameters, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context& __ctx, const ::RoboCompTrajectoryRobot2D::Callback_TrajectoryRobot2D_mapBasedTargetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_mapBasedTarget(parameters, &__ctx, __del, __cookie);
    }

    void end_mapBasedTarget(const ::Ice::AsyncResultPtr&);
    
private:

    void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_secure(bool __secure) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_twoway() const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_oneway() const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_batchOneway() const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_datagram() const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_batchDatagram() const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_compress(bool __compress) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TrajectoryRobot2D> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TrajectoryRobot2D*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompTrajectoryRobot2D::NavState getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stop(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D : virtual public ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompTrajectoryRobot2D::NavState getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stop(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D : virtual public ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompTrajectoryRobot2D::NavState getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stop(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompTrajectoryRobot2D
{

class TrajectoryRobot2D : virtual public ::Ice::Object
{
public:

    typedef TrajectoryRobot2DPrx ProxyType;
    typedef TrajectoryRobot2DPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Float go(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___go(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___goReferenced(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___goBackwards(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeTarget(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompTrajectoryRobot2D::NavState getState(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stop(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stop(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___mapBasedTarget(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TrajectoryRobot2D& l, const TrajectoryRobot2D& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TrajectoryRobot2D& l, const TrajectoryRobot2D& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompTrajectoryRobot2D
{

template<class T>
class CallbackNC_TrajectoryRobot2D_go : public Callback_TrajectoryRobot2D_go_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_TrajectoryRobot2D_go(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_go(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TrajectoryRobot2D_goPtr
newCallback_TrajectoryRobot2D_go(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_go<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_goPtr
newCallback_TrajectoryRobot2D_go(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_go<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_go : public Callback_TrajectoryRobot2D_go_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_TrajectoryRobot2D_go(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_go(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TrajectoryRobot2D_goPtr
newCallback_TrajectoryRobot2D_go(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_go<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_goPtr
newCallback_TrajectoryRobot2D_go(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_go<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TrajectoryRobot2D_goReferenced : public Callback_TrajectoryRobot2D_goReferenced_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_TrajectoryRobot2D_goReferenced(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_goReferenced(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TrajectoryRobot2D_goReferencedPtr
newCallback_TrajectoryRobot2D_goReferenced(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_goReferenced<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_goReferencedPtr
newCallback_TrajectoryRobot2D_goReferenced(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_goReferenced<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_goReferenced : public Callback_TrajectoryRobot2D_goReferenced_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_TrajectoryRobot2D_goReferenced(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_goReferenced(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TrajectoryRobot2D_goReferencedPtr
newCallback_TrajectoryRobot2D_goReferenced(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_goReferenced<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_goReferencedPtr
newCallback_TrajectoryRobot2D_goReferenced(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_goReferenced<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TrajectoryRobot2D_goBackwards : public Callback_TrajectoryRobot2D_goBackwards_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_TrajectoryRobot2D_goBackwards(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_goBackwards(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TrajectoryRobot2D_goBackwardsPtr
newCallback_TrajectoryRobot2D_goBackwards(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_goBackwards<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_goBackwardsPtr
newCallback_TrajectoryRobot2D_goBackwards(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_goBackwards<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_goBackwards : public Callback_TrajectoryRobot2D_goBackwards_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_TrajectoryRobot2D_goBackwards(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_goBackwards(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TrajectoryRobot2D_goBackwardsPtr
newCallback_TrajectoryRobot2D_goBackwards(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_goBackwards<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_goBackwardsPtr
newCallback_TrajectoryRobot2D_goBackwards(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_goBackwards<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TrajectoryRobot2D_changeTarget : public Callback_TrajectoryRobot2D_changeTarget_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_TrajectoryRobot2D_changeTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_changeTarget(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TrajectoryRobot2D_changeTargetPtr
newCallback_TrajectoryRobot2D_changeTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_changeTarget<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_changeTargetPtr
newCallback_TrajectoryRobot2D_changeTarget(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_changeTarget<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_changeTarget : public Callback_TrajectoryRobot2D_changeTarget_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_TrajectoryRobot2D_changeTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_changeTarget(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TrajectoryRobot2D_changeTargetPtr
newCallback_TrajectoryRobot2D_changeTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_changeTarget<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_changeTargetPtr
newCallback_TrajectoryRobot2D_changeTarget(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_changeTarget<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TrajectoryRobot2D_getState : public Callback_TrajectoryRobot2D_getState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompTrajectoryRobot2D::NavState&);

    CallbackNC_TrajectoryRobot2D_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::RoboCompTrajectoryRobot2D::NavState __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TrajectoryRobot2D_getStatePtr
newCallback_TrajectoryRobot2D_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompTrajectoryRobot2D::NavState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_getState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_getStatePtr
newCallback_TrajectoryRobot2D_getState(T* instance, void (T::*cb)(const ::RoboCompTrajectoryRobot2D::NavState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_getState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_getState : public Callback_TrajectoryRobot2D_getState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompTrajectoryRobot2D::NavState&, const CT&);

    Callback_TrajectoryRobot2D_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx __proxy = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPrx::uncheckedCast(__result->getProxy());
        ::RoboCompTrajectoryRobot2D::NavState __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TrajectoryRobot2D_getStatePtr
newCallback_TrajectoryRobot2D_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompTrajectoryRobot2D::NavState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_getStatePtr
newCallback_TrajectoryRobot2D_getState(T* instance, void (T::*cb)(const ::RoboCompTrajectoryRobot2D::NavState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TrajectoryRobot2D_stop : public Callback_TrajectoryRobot2D_stop_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TrajectoryRobot2D_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_stop<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_stop<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_stop : public Callback_TrajectoryRobot2D_stop_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TrajectoryRobot2D_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_stopPtr
newCallback_TrajectoryRobot2D_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TrajectoryRobot2D_mapBasedTarget : public Callback_TrajectoryRobot2D_mapBasedTarget_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TrajectoryRobot2D_mapBasedTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_mapBasedTarget<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_mapBasedTarget<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_mapBasedTarget<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TrajectoryRobot2D_mapBasedTarget<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TrajectoryRobot2D_mapBasedTarget : public Callback_TrajectoryRobot2D_mapBasedTarget_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TrajectoryRobot2D_mapBasedTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_mapBasedTarget<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_mapBasedTarget<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_mapBasedTarget<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TrajectoryRobot2D_mapBasedTargetPtr
newCallback_TrajectoryRobot2D_mapBasedTarget(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TrajectoryRobot2D_mapBasedTarget<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
