// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TrajectoryRobot2D.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TrajectoryRobot2D.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name = "go";

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name = "goReferenced";

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name = "goBackwards";

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name = "changeTarget";

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name = "getState";

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name = "stop";

const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name = "mapBasedTarget";

}

namespace
{

const char* __RoboCompTrajectoryRobot2D__RoboCompException_name = "RoboCompTrajectoryRobot2D::RoboCompException";

struct __F__RoboCompTrajectoryRobot2D__RoboCompException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompTrajectoryRobot2D::RoboCompException();
    }
};

class __F__RoboCompTrajectoryRobot2D__RoboCompException__Init
{
public:

    __F__RoboCompTrajectoryRobot2D__RoboCompException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompTrajectoryRobot2D::RoboCompException", new __F__RoboCompTrajectoryRobot2D__RoboCompException);
    }

    ~__F__RoboCompTrajectoryRobot2D__RoboCompException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompTrajectoryRobot2D::RoboCompException");
    }
};

const __F__RoboCompTrajectoryRobot2D__RoboCompException__Init __F__RoboCompTrajectoryRobot2D__RoboCompException__i;

}

RoboCompTrajectoryRobot2D::RoboCompException::RoboCompException(const ::std::string& __ice_text) :
    ::Ice::UserException(),
    text(__ice_text)
{
}

RoboCompTrajectoryRobot2D::RoboCompException::~RoboCompException() throw()
{
}

::std::string
RoboCompTrajectoryRobot2D::RoboCompException::ice_name() const
{
    return __RoboCompTrajectoryRobot2D__RoboCompException_name;
}

RoboCompTrajectoryRobot2D::RoboCompException*
RoboCompTrajectoryRobot2D::RoboCompException::ice_clone() const
{
    return new RoboCompException(*this);
}

void
RoboCompTrajectoryRobot2D::RoboCompException::ice_throw() const
{
    throw *this;
}

void
RoboCompTrajectoryRobot2D::RoboCompException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompTrajectoryRobot2D::RoboCompException", -1, true);
    __os->write(text);
    __os->endWriteSlice();
}

void
RoboCompTrajectoryRobot2D::RoboCompException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(text);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompTrajectoryRobot2D::upCast(::IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* p) { return p; }

void
::IceProxy::RoboCompTrajectoryRobot2D::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D;
        v->__copyFrom(proxy);
    }
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            return __del->go(target, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_go(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name);
    ::Ice::Float __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            return __del->goReferenced(target, xRef, zRef, threshold, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __os->write(xRef);
        __os->write(zRef);
        __os->write(threshold);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_goReferenced(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name);
    ::Ice::Float __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            return __del->goBackwards(target, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_goBackwards(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name);
    ::Ice::Float __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            return __del->changeTarget(target, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Float
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_changeTarget(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name);
    ::Ice::Float __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompTrajectoryRobot2D::NavState
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::getState(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            return __del->getState(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_getState(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompTrajectoryRobot2D::NavState
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_getState(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name);
    ::RoboCompTrajectoryRobot2D::NavState __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::stop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            __del->stop(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_stop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_stop(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name);
}

void
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* __del = dynamic_cast< ::IceDelegate::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(__delBase.get());
            __del->mapBasedTarget(parameters, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::begin_mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(parameters);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::end_mapBasedTarget(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name);
}

const ::std::string&
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_staticId()
{
    return ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::__newInstance() const
{
    return new TrajectoryRobot2D;
}

::Ice::Float
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Float __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Float
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __os->write(xRef);
        __os->write(zRef);
        __os->write(threshold);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Float __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Float
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Float __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Float
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(target);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Float __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompTrajectoryRobot2D::NavState
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::getState(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompTrajectoryRobot2D::NavState __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::stop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(parameters);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Float
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::go(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float& __result, const ::RoboCompTrajectoryRobot2D::TargetPose& __p_target, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_target(__p_target)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->go(_m_target, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Float& _result;
        const ::RoboCompTrajectoryRobot2D::TargetPose& _m_target;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__go_name, ::Ice::Normal, __context);
    ::Ice::Float __result;
    try
    {
        _DirectI __direct(__result, target, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Float
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::goReferenced(const ::RoboCompTrajectoryRobot2D::TargetPose& target, ::Ice::Float xRef, ::Ice::Float zRef, ::Ice::Float threshold, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float& __result, const ::RoboCompTrajectoryRobot2D::TargetPose& __p_target, ::Ice::Float __p_xRef, ::Ice::Float __p_zRef, ::Ice::Float __p_threshold, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_target(__p_target),
            _m_xRef(__p_xRef),
            _m_zRef(__p_zRef),
            _m_threshold(__p_threshold)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->goReferenced(_m_target, _m_xRef, _m_zRef, _m_threshold, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Float& _result;
        const ::RoboCompTrajectoryRobot2D::TargetPose& _m_target;
        ::Ice::Float _m_xRef;
        ::Ice::Float _m_zRef;
        ::Ice::Float _m_threshold;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goReferenced_name, ::Ice::Normal, __context);
    ::Ice::Float __result;
    try
    {
        _DirectI __direct(__result, target, xRef, zRef, threshold, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Float
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::goBackwards(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float& __result, const ::RoboCompTrajectoryRobot2D::TargetPose& __p_target, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_target(__p_target)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->goBackwards(_m_target, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Float& _result;
        const ::RoboCompTrajectoryRobot2D::TargetPose& _m_target;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__goBackwards_name, ::Ice::Normal, __context);
    ::Ice::Float __result;
    try
    {
        _DirectI __direct(__result, target, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Float
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::changeTarget(const ::RoboCompTrajectoryRobot2D::TargetPose& target, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float& __result, const ::RoboCompTrajectoryRobot2D::TargetPose& __p_target, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_target(__p_target)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->changeTarget(_m_target, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Float& _result;
        const ::RoboCompTrajectoryRobot2D::TargetPose& _m_target;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__changeTarget_name, ::Ice::Normal, __context);
    ::Ice::Float __result;
    try
    {
        _DirectI __direct(__result, target, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompTrajectoryRobot2D::NavState
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::getState(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompTrajectoryRobot2D::NavState& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getState(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompTrajectoryRobot2D::NavState& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__getState_name, ::Ice::Normal, __context);
    ::RoboCompTrajectoryRobot2D::NavState __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::stop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->stop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__stop_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::mapBasedTarget(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& parameters, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& __p_parameters, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_parameters(__p_parameters)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* servant = dynamic_cast< ::RoboCompTrajectoryRobot2D::TrajectoryRobot2D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->mapBasedTarget(_m_parameters, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompTrajectoryRobot2D::NavigationParameterMap& _m_parameters;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D__mapBasedTarget_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(parameters, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompTrajectoryRobot2D::upCast(::RoboCompTrajectoryRobot2D::TrajectoryRobot2D* p) { return p; }

namespace
{
const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids[2] =
{
    "::Ice::Object",
    "::RoboCompTrajectoryRobot2D::TrajectoryRobot2D"
};

}

bool
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids[0], &__RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids[2]);
}

const ::std::string&
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_id(const ::Ice::Current&) const
{
    return __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids[1];
}

const ::std::string&
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_staticId()
{
    return __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_ids[1];
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___go(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompTrajectoryRobot2D::TargetPose target;
    __is->read(target);
    __inS.endReadParams();
    try
    {
        ::Ice::Float __ret = go(target, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___goReferenced(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompTrajectoryRobot2D::TargetPose target;
    ::Ice::Float xRef;
    ::Ice::Float zRef;
    ::Ice::Float threshold;
    __is->read(target);
    __is->read(xRef);
    __is->read(zRef);
    __is->read(threshold);
    __inS.endReadParams();
    try
    {
        ::Ice::Float __ret = goReferenced(target, xRef, zRef, threshold, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___goBackwards(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompTrajectoryRobot2D::TargetPose target;
    __is->read(target);
    __inS.endReadParams();
    try
    {
        ::Ice::Float __ret = goBackwards(target, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___changeTarget(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompTrajectoryRobot2D::TargetPose target;
    __is->read(target);
    __inS.endReadParams();
    try
    {
        ::Ice::Float __ret = changeTarget(target, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompTrajectoryRobot2D::RoboCompException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___getState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompTrajectoryRobot2D::NavState __ret = getState(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___stop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    stop(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::___mapBasedTarget(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompTrajectoryRobot2D::NavigationParameterMap parameters;
    __is->read(parameters);
    __inS.endReadParams();
    mapBasedTarget(parameters, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_all[] =
{
    "changeTarget",
    "getState",
    "go",
    "goBackwards",
    "goReferenced",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "mapBasedTarget",
    "stop"
};

}

::Ice::DispatchStatus
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompTrajectoryRobot2D__TrajectoryRobot2D_all, __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompTrajectoryRobot2D__TrajectoryRobot2D_all)
    {
        case 0:
        {
            return ___changeTarget(in, current);
        }
        case 1:
        {
            return ___getState(in, current);
        }
        case 2:
        {
            return ___go(in, current);
        }
        case 3:
        {
            return ___goBackwards(in, current);
        }
        case 4:
        {
            return ___goReferenced(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
        case 9:
        {
            return ___mapBasedTarget(in, current);
        }
        case 10:
        {
            return ___stop(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompTrajectoryRobot2D::TrajectoryRobot2D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompTrajectoryRobot2D::__patch(TrajectoryRobot2DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompTrajectoryRobot2D::TrajectoryRobot2DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompTrajectoryRobot2D::TrajectoryRobot2D::ice_staticId(), v);
    }
}
