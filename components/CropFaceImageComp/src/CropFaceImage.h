// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `CropFaceImage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____CropFaceImage_h__
#define ____CropFaceImage_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <MSKRGBD.h>
#include <MSKFace.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompCropFaceImage
{

class CropFaceImage;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCropFaceImage::CropFaceImage>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCropFaceImage::CropFaceImage*);

}

}

namespace RoboCompCropFaceImage
{

class CropFaceImage;
bool operator==(const CropFaceImage&, const CropFaceImage&);
bool operator<(const CropFaceImage&, const CropFaceImage&);
::Ice::Object* upCast(::RoboCompCropFaceImage::CropFaceImage*);
typedef ::IceInternal::Handle< ::RoboCompCropFaceImage::CropFaceImage> CropFaceImagePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCropFaceImage::CropFaceImage> CropFaceImagePrx;
void __patch(CropFaceImagePtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompCropFaceImage
{

struct SensedFace
{
    ::Ice::Int id;
    ::RoboCompMSKRGBD::TRGBImage faceImage;
    ::RoboCompMSKRGBD::TRGBImage faceImageNorm;
    ::RoboCompMSKFace::Eye leftEye;
    ::RoboCompMSKFace::Eye rightEye;

    bool operator==(const SensedFace& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(faceImage != __rhs.faceImage)
        {
            return false;
        }
        if(faceImageNorm != __rhs.faceImageNorm)
        {
            return false;
        }
        if(leftEye != __rhs.leftEye)
        {
            return false;
        }
        if(rightEye != __rhs.rightEye)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SensedFace& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(faceImage < __rhs.faceImage)
        {
            return true;
        }
        else if(__rhs.faceImage < faceImage)
        {
            return false;
        }
        if(faceImageNorm < __rhs.faceImageNorm)
        {
            return true;
        }
        else if(__rhs.faceImageNorm < faceImageNorm)
        {
            return false;
        }
        if(leftEye < __rhs.leftEye)
        {
            return true;
        }
        else if(__rhs.leftEye < leftEye)
        {
            return false;
        }
        if(rightEye < __rhs.rightEye)
        {
            return true;
        }
        else if(__rhs.rightEye < rightEye)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SensedFace& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SensedFace& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SensedFace& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SensedFace& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompCropFaceImage::SensedFace> SensedFaceList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompCropFaceImage::SensedFace>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 38;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompCropFaceImage::SensedFace, S>
{
    static void write(S* __os, const ::RoboCompCropFaceImage::SensedFace& v)
    {
        __os->write(v.id);
        __os->write(v.faceImage);
        __os->write(v.faceImageNorm);
        __os->write(v.leftEye);
        __os->write(v.rightEye);
    }
};

template<class S>
struct StreamReader< ::RoboCompCropFaceImage::SensedFace, S>
{
    static void read(S* __is, ::RoboCompCropFaceImage::SensedFace& v)
    {
        __is->read(v.id);
        __is->read(v.faceImage);
        __is->read(v.faceImageNorm);
        __is->read(v.leftEye);
        __is->read(v.rightEye);
    }
};

}

namespace RoboCompCropFaceImage
{

}

namespace IceProxy
{

namespace RoboCompCropFaceImage
{

class CropFaceImage : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_secure(bool __secure) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_twoway() const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_oneway() const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_batchOneway() const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_datagram() const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_batchDatagram() const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_compress(bool __compress) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CropFaceImage> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CropFaceImage*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompCropFaceImage
{

class CropFaceImage : virtual public ::IceDelegate::Ice::Object
{
public:
};

}

}

namespace IceDelegateM
{

namespace RoboCompCropFaceImage
{

class CropFaceImage : virtual public ::IceDelegate::RoboCompCropFaceImage::CropFaceImage,
                      virtual public ::IceDelegateM::Ice::Object
{
public:
};

}

}

namespace IceDelegateD
{

namespace RoboCompCropFaceImage
{

class CropFaceImage : virtual public ::IceDelegate::RoboCompCropFaceImage::CropFaceImage,
                      virtual public ::IceDelegateD::Ice::Object
{
public:
};

}

}

namespace RoboCompCropFaceImage
{

class CropFaceImage : virtual public ::Ice::Object
{
public:

    typedef CropFaceImagePrx ProxyType;
    typedef CropFaceImagePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const CropFaceImage& l, const CropFaceImage& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CropFaceImage& l, const CropFaceImage& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompCropFaceImage
{

}

#endif
