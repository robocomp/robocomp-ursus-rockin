// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MSKRGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____MSKRGBD_h__
#define ____MSKRGBD_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKRGBD::MSKRGBDEvent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompMSKRGBD::MSKRGBDEvent*);

class MSKRGBD;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKRGBD::MSKRGBD>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompMSKRGBD::MSKRGBD*);

}

}

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent;
bool operator==(const MSKRGBDEvent&, const MSKRGBDEvent&);
bool operator<(const MSKRGBDEvent&, const MSKRGBDEvent&);
::Ice::Object* upCast(::RoboCompMSKRGBD::MSKRGBDEvent*);
typedef ::IceInternal::Handle< ::RoboCompMSKRGBD::MSKRGBDEvent> MSKRGBDEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKRGBD::MSKRGBDEvent> MSKRGBDEventPrx;
void __patch(MSKRGBDEventPtr&, const ::Ice::ObjectPtr&);

class MSKRGBD;
bool operator==(const MSKRGBD&, const MSKRGBD&);
bool operator<(const MSKRGBD&, const MSKRGBD&);
::Ice::Object* upCast(::RoboCompMSKRGBD::MSKRGBD*);
typedef ::IceInternal::Handle< ::RoboCompMSKRGBD::MSKRGBD> MSKRGBDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKRGBD::MSKRGBD> MSKRGBDPrx;
void __patch(MSKRGBDPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompMSKRGBD
{

typedef ::std::vector< ::Ice::Byte> TRGB;

typedef ::std::vector< ::Ice::Short> TDepth;

struct TRGBImage
{
    ::RoboCompMSKRGBD::TRGB image;
    ::Ice::Int height;
    ::Ice::Int width;

    bool operator==(const TRGBImage& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(image != __rhs.image)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TRGBImage& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(image < __rhs.image)
        {
            return true;
        }
        else if(__rhs.image < image)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TRGBImage& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TRGBImage& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TRGBImage& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TRGBImage& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct TDepthImage
{
    ::RoboCompMSKRGBD::TDepth image;
    ::Ice::Int height;
    ::Ice::Int width;

    bool operator==(const TDepthImage& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(image != __rhs.image)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TDepthImage& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(image < __rhs.image)
        {
            return true;
        }
        else if(__rhs.image < image)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TDepthImage& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TDepthImage& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TDepthImage& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TDepthImage& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompMSKRGBD::TRGBImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompMSKRGBD::TRGBImage, S>
{
    static void write(S* __os, const ::RoboCompMSKRGBD::TRGBImage& v)
    {
        __os->write(v.image);
        __os->write(v.height);
        __os->write(v.width);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKRGBD::TRGBImage, S>
{
    static void read(S* __is, ::RoboCompMSKRGBD::TRGBImage& v)
    {
        __is->read(v.image);
        __is->read(v.height);
        __is->read(v.width);
    }
};

template<>
struct StreamableTraits< ::RoboCompMSKRGBD::TDepthImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompMSKRGBD::TDepthImage, S>
{
    static void write(S* __os, const ::RoboCompMSKRGBD::TDepthImage& v)
    {
        __os->write(v.image);
        __os->write(v.height);
        __os->write(v.width);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKRGBD::TDepthImage, S>
{
    static void read(S* __is, ::RoboCompMSKRGBD::TDepthImage& v)
    {
        __is->read(v.image);
        __is->read(v.height);
        __is->read(v.width);
    }
};

}

namespace RoboCompMSKRGBD
{

class Callback_MSKRGBDEvent_newRGBImageAvailable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MSKRGBDEvent_newRGBImageAvailable_Base> Callback_MSKRGBDEvent_newRGBImageAvailablePtr;

class Callback_MSKRGBDEvent_newDepthImageAvailable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MSKRGBDEvent_newDepthImageAvailable_Base> Callback_MSKRGBDEvent_newDepthImageAvailablePtr;

class Callback_MSKRGBD_getRGBImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MSKRGBD_getRGBImage_Base> Callback_MSKRGBD_getRGBImagePtr;

class Callback_MSKRGBD_getDepthImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MSKRGBD_getDepthImage_Base> Callback_MSKRGBD_getDepthImagePtr;

}

namespace IceProxy
{

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent : virtual public ::IceProxy::Ice::Object
{
public:

    void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage)
    {
        newRGBImageAvailable(RGBImage, 0);
    }
    void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& __ctx)
    {
        newRGBImageAvailable(RGBImage, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_newRGBImageAvailable(RGBImage, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newRGBImageAvailable(RGBImage, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_newRGBImageAvailable(RGBImage, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newRGBImageAvailable(RGBImage, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage)
    {
        return begin_newRGBImageAvailable(RGBImage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& __ctx)
    {
        return begin_newRGBImageAvailable(RGBImage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newRGBImageAvailable(RGBImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newRGBImageAvailable(RGBImage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::RoboCompMSKRGBD::Callback_MSKRGBDEvent_newRGBImageAvailablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newRGBImageAvailable(RGBImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& __ctx, const ::RoboCompMSKRGBD::Callback_MSKRGBDEvent_newRGBImageAvailablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newRGBImageAvailable(RGBImage, &__ctx, __del, __cookie);
    }

    void end_newRGBImageAvailable(const ::Ice::AsyncResultPtr&);
    
private:

    void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage)
    {
        newDepthImageAvailable(depthImage, 0);
    }
    void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& __ctx)
    {
        newDepthImageAvailable(depthImage, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_newDepthImageAvailable(depthImage, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newDepthImageAvailable(depthImage, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_newDepthImageAvailable(depthImage, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newDepthImageAvailable(depthImage, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage)
    {
        return begin_newDepthImageAvailable(depthImage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& __ctx)
    {
        return begin_newDepthImageAvailable(depthImage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newDepthImageAvailable(depthImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newDepthImageAvailable(depthImage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::RoboCompMSKRGBD::Callback_MSKRGBDEvent_newDepthImageAvailablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newDepthImageAvailable(depthImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& __ctx, const ::RoboCompMSKRGBD::Callback_MSKRGBDEvent_newDepthImageAvailablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newDepthImageAvailable(depthImage, &__ctx, __del, __cookie);
    }

    void end_newDepthImageAvailable(const ::Ice::AsyncResultPtr&);
    
private:

    void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_secure(bool __secure) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_twoway() const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_oneway() const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_batchOneway() const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_datagram() const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_batchDatagram() const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_compress(bool __compress) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBDEvent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MSKRGBDEvent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MSKRGBD : virtual public ::IceProxy::Ice::Object
{
public:

    void getRGBImage(::RoboCompMSKRGBD::TRGBImage& RGBImage)
    {
        getRGBImage(RGBImage, 0);
    }
    void getRGBImage(::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::Context& __ctx)
    {
        getRGBImage(RGBImage, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRGBImage(const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TRGBImage&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGBImage(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBImage(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGBImage(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBImage(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TRGBImage&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGBImage(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBImage(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGBImage(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRGBImage(const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TRGBImage&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompMSKRGBD::TRGBImage&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
                ::RoboCompMSKRGBD::TRGBImage RGBImage;
                try
                {
                    __proxy->end_getRGBImage(RGBImage, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(RGBImage);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompMSKRGBD::TRGBImage&)> _response;
        };
        return begin_getRGBImage(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRGBImage()
    {
        return begin_getRGBImage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBImage(const ::Ice::Context& __ctx)
    {
        return begin_getRGBImage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBImage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBImage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBImage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBImage(const ::RoboCompMSKRGBD::Callback_MSKRGBD_getRGBImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBImage(const ::Ice::Context& __ctx, const ::RoboCompMSKRGBD::Callback_MSKRGBD_getRGBImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBImage(&__ctx, __del, __cookie);
    }

    void end_getRGBImage(::RoboCompMSKRGBD::TRGBImage& RGBImage, const ::Ice::AsyncResultPtr&);
    
private:

    void getRGBImage(::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRGBImage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getDepthImage(::RoboCompMSKRGBD::TDepthImage& depthImage)
    {
        getDepthImage(depthImage, 0);
    }
    void getDepthImage(::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::Context& __ctx)
    {
        getDepthImage(depthImage, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDepthImage(const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TDepthImage&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDepthImage(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDepthImage(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDepthImage(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDepthImage(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TDepthImage&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDepthImage(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDepthImage(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDepthImage(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDepthImage(const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TDepthImage&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompMSKRGBD::TDepthImage&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
                ::RoboCompMSKRGBD::TDepthImage depthImage;
                try
                {
                    __proxy->end_getDepthImage(depthImage, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(depthImage);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompMSKRGBD::TDepthImage&)> _response;
        };
        return begin_getDepthImage(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDepthImage()
    {
        return begin_getDepthImage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepthImage(const ::Ice::Context& __ctx)
    {
        return begin_getDepthImage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepthImage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthImage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthImage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthImage(const ::RoboCompMSKRGBD::Callback_MSKRGBD_getDepthImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthImage(const ::Ice::Context& __ctx, const ::RoboCompMSKRGBD::Callback_MSKRGBD_getDepthImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthImage(&__ctx, __del, __cookie);
    }

    void end_getDepthImage(::RoboCompMSKRGBD::TDepthImage& depthImage, const ::Ice::AsyncResultPtr&);
    
private:

    void getDepthImage(::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDepthImage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_secure(bool __secure) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_twoway() const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_oneway() const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_batchOneway() const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_datagram() const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_batchDatagram() const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_compress(bool __compress) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKRGBD> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MSKRGBD*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class MSKRGBD : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void getRGBImage(::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getDepthImage(::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent : virtual public ::IceDelegate::RoboCompMSKRGBD::MSKRGBDEvent,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class MSKRGBD : virtual public ::IceDelegate::RoboCompMSKRGBD::MSKRGBD,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void getRGBImage(::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getDepthImage(::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent : virtual public ::IceDelegate::RoboCompMSKRGBD::MSKRGBDEvent,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class MSKRGBD : virtual public ::IceDelegate::RoboCompMSKRGBD::MSKRGBD,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void getRGBImage(::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getDepthImage(::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompMSKRGBD
{

class MSKRGBDEvent : virtual public ::Ice::Object
{
public:

    typedef MSKRGBDEventPrx ProxyType;
    typedef MSKRGBDEventPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___newRGBImageAvailable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___newDepthImageAvailable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MSKRGBDEvent& l, const MSKRGBDEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MSKRGBDEvent& l, const MSKRGBDEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MSKRGBD : virtual public ::Ice::Object
{
public:

    typedef MSKRGBDPrx ProxyType;
    typedef MSKRGBDPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getRGBImage(::RoboCompMSKRGBD::TRGBImage&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRGBImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDepthImage(::RoboCompMSKRGBD::TDepthImage&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDepthImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MSKRGBD& l, const MSKRGBD& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MSKRGBD& l, const MSKRGBD& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompMSKRGBD
{

template<class T>
class CallbackNC_MSKRGBDEvent_newRGBImageAvailable : public Callback_MSKRGBDEvent_newRGBImageAvailable_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MSKRGBDEvent_newRGBImageAvailable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newRGBImageAvailable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newRGBImageAvailable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newRGBImageAvailable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newRGBImageAvailable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MSKRGBDEvent_newRGBImageAvailable : public Callback_MSKRGBDEvent_newRGBImageAvailable_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MSKRGBDEvent_newRGBImageAvailable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newRGBImageAvailable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newRGBImageAvailable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newRGBImageAvailable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBDEvent_newRGBImageAvailablePtr
newCallback_MSKRGBDEvent_newRGBImageAvailable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newRGBImageAvailable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MSKRGBDEvent_newDepthImageAvailable : public Callback_MSKRGBDEvent_newDepthImageAvailable_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MSKRGBDEvent_newDepthImageAvailable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newDepthImageAvailable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newDepthImageAvailable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newDepthImageAvailable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBDEvent_newDepthImageAvailable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MSKRGBDEvent_newDepthImageAvailable : public Callback_MSKRGBDEvent_newDepthImageAvailable_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MSKRGBDEvent_newDepthImageAvailable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newDepthImageAvailable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newDepthImageAvailable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newDepthImageAvailable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBDEvent_newDepthImageAvailablePtr
newCallback_MSKRGBDEvent_newDepthImageAvailable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBDEvent_newDepthImageAvailable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MSKRGBD_getRGBImage : public Callback_MSKRGBD_getRGBImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompMSKRGBD::TRGBImage&);

    CallbackNC_MSKRGBD_getRGBImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompMSKRGBD::TRGBImage RGBImage;
        try
        {
            __proxy->end_getRGBImage(RGBImage, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(RGBImage);
        }
    }

    Response response;
};

template<class T> Callback_MSKRGBD_getRGBImagePtr
newCallback_MSKRGBD_getRGBImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompMSKRGBD::TRGBImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBD_getRGBImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKRGBD_getRGBImagePtr
newCallback_MSKRGBD_getRGBImage(T* instance, void (T::*cb)(const ::RoboCompMSKRGBD::TRGBImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBD_getRGBImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MSKRGBD_getRGBImage : public Callback_MSKRGBD_getRGBImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompMSKRGBD::TRGBImage&, const CT&);

    Callback_MSKRGBD_getRGBImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompMSKRGBD::TRGBImage RGBImage;
        try
        {
            __proxy->end_getRGBImage(RGBImage, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(RGBImage, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MSKRGBD_getRGBImagePtr
newCallback_MSKRGBD_getRGBImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompMSKRGBD::TRGBImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBD_getRGBImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBD_getRGBImagePtr
newCallback_MSKRGBD_getRGBImage(T* instance, void (T::*cb)(const ::RoboCompMSKRGBD::TRGBImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBD_getRGBImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MSKRGBD_getDepthImage : public Callback_MSKRGBD_getDepthImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompMSKRGBD::TDepthImage&);

    CallbackNC_MSKRGBD_getDepthImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompMSKRGBD::TDepthImage depthImage;
        try
        {
            __proxy->end_getDepthImage(depthImage, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(depthImage);
        }
    }

    Response response;
};

template<class T> Callback_MSKRGBD_getDepthImagePtr
newCallback_MSKRGBD_getDepthImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompMSKRGBD::TDepthImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBD_getDepthImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKRGBD_getDepthImagePtr
newCallback_MSKRGBD_getDepthImage(T* instance, void (T::*cb)(const ::RoboCompMSKRGBD::TDepthImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKRGBD_getDepthImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MSKRGBD_getDepthImage : public Callback_MSKRGBD_getDepthImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompMSKRGBD::TDepthImage&, const CT&);

    Callback_MSKRGBD_getDepthImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompMSKRGBD::TDepthImage depthImage;
        try
        {
            __proxy->end_getDepthImage(depthImage, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(depthImage, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MSKRGBD_getDepthImagePtr
newCallback_MSKRGBD_getDepthImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompMSKRGBD::TDepthImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBD_getDepthImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKRGBD_getDepthImagePtr
newCallback_MSKRGBD_getDepthImage(T* instance, void (T::*cb)(const ::RoboCompMSKRGBD::TDepthImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKRGBD_getDepthImage<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
