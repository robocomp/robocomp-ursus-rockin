// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MSKFace.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____MSKFace_h__
#define ____MSKFace_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <MSKRGBD.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompMSKFace
{

class MSKFaceEvent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKFace::MSKFaceEvent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompMSKFace::MSKFaceEvent*);

class MSKFace;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKFace::MSKFace>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompMSKFace::MSKFace*);

}

}

namespace RoboCompMSKFace
{

class MSKFaceEvent;
bool operator==(const MSKFaceEvent&, const MSKFaceEvent&);
bool operator<(const MSKFaceEvent&, const MSKFaceEvent&);
::Ice::Object* upCast(::RoboCompMSKFace::MSKFaceEvent*);
typedef ::IceInternal::Handle< ::RoboCompMSKFace::MSKFaceEvent> MSKFaceEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKFace::MSKFaceEvent> MSKFaceEventPrx;
void __patch(MSKFaceEventPtr&, const ::Ice::ObjectPtr&);

class MSKFace;
bool operator==(const MSKFace&, const MSKFace&);
bool operator<(const MSKFace&, const MSKFace&);
::Ice::Object* upCast(::RoboCompMSKFace::MSKFace*);
typedef ::IceInternal::Handle< ::RoboCompMSKFace::MSKFace> MSKFacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKFace::MSKFace> MSKFacePrx;
void __patch(MSKFacePtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompMSKFace
{

struct Vector3DF
{
    ::Ice::Float X;
    ::Ice::Float Y;
    ::Ice::Float Z;

    bool operator==(const Vector3DF& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(X != __rhs.X)
        {
            return false;
        }
        if(Y != __rhs.Y)
        {
            return false;
        }
        if(Z != __rhs.Z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Vector3DF& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(X < __rhs.X)
        {
            return true;
        }
        else if(__rhs.X < X)
        {
            return false;
        }
        if(Y < __rhs.Y)
        {
            return true;
        }
        else if(__rhs.Y < Y)
        {
            return false;
        }
        if(Z < __rhs.Z)
        {
            return true;
        }
        else if(__rhs.Z < Z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Vector3DF& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Vector3DF& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Vector3DF& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Vector3DF& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum FeaturePoint
{
    TopSkull,
    TopRightForehead,
    FP2,
    FP3,
    FP4,
    FP5,
    FP6,
    MiddleTopDipUpperLip,
    F8,
    AboveChin,
    BottomOfChin,
    F11,
    FP12,
    FP13,
    FP14,
    RightOfRightEyebrow,
    MiddleTopOfRightEyebrow,
    LeftOfRightEyebrow,
    MiddleBottomOfRightEyebrow,
    AboveMidUpperRightEyelid,
    OuterCornerOfRightEye,
    MiddleTopRightEyelid,
    MiddleBottomRightEyelid,
    InnerCornerRightEye,
    UnderMidBottomRightEyelid,
    FP25,
    FP26,
    FP27,
    FP28,
    FP29,
    RightSideOfChin,
    OutsideRightCornerMouth,
    RightOfChin,
    RightTopDipUpperLip,
    TopLeftForehead,
    FP35,
    FP36,
    FP37,
    FP38,
    FP39,
    MiddleTopLowerLip,
    MiddleBottomLowerLip,
    FP42,
    FP43,
    FP44,
    FP45,
    FP46,
    FP47,
    LeftOfLeftEyebrow,
    MiddleTopOfLeftEyebrow,
    RightOfLeftEyebrow,
    MiddleBottomOfLeftEyebrow,
    AboveMidUpperLeftEyelid,
    OuterCornerOfLeftEye,
    MiddleTopLeftEyelid,
    MiddleBottomLeftEyelid,
    InnerCornerLeftEye,
    UnderMidBottomLeftEyelid,
    FP58,
    FP59,
    FP60,
    FP61,
    FP62,
    LeftSideOfCheek,
    OutsideLeftCornerMouth,
    LeftOfChin,
    LeftTopDipUpperLip,
    OuterTopRightPupil,
    OuterBottomRightPupil,
    OuterTopLeftPupil,
    OuterBottomLeftPupil,
    InnerTopRightPupil,
    InnerBottomRightPupil,
    InnerTopLeftPupil,
    InnerBottomLeftPupil,
    FP75,
    FP76,
    FP77,
    FP78,
    RightTopUpperLip,
    LeftTopUpperLip,
    RightBottomUpperLip,
    LeftBottomUpperLip,
    RightTopLowerLip,
    LeftTopLowerLip,
    RightBottomLowerLip,
    LeftBottomLowerLip,
    MiddleBottomUpperLip,
    LeftCornerMouth,
    RightCornerMouth,
    BottomOfRightCheek,
    BottomOfLeftCheek,
    FP92,
    FP93,
    FP94,
    AboveThreeFourthRightEyelid,
    AboveThreeFourthLeftEyelid,
    ThreeFourthTopRightEyelid,
    ThreeFourthTopLeftEyelid,
    ThreeFourthBottomRightEyelid,
    ThreeFourthBottomLeftEyelid,
    BelowThreeFourthRightEyelid,
    BelowThreeFourthLeftEyelid,
    AboveOneFourthRightEyelid,
    AboveOneFourthLeftEyelid,
    OneFourthTopRightEyelid,
    OneFourthTopLeftEyelid,
    OneFourthBottomRightEyelid,
    OneFourthBottomLeftEyelid,
    FP109,
    FP110,
    FP111,
    FP112,
    FP113,
    FP114,
    FP115,
    FP116,
    FP117,
    FP118,
    FP119,
    FP120
};

enum AnimationUnit
{
    LipRaiser,
    JawLower,
    LipStretcher,
    BrowLower,
    LipCornerDepressor,
    BrowRaiser
};

struct PointF
{
    ::Ice::Float X;
    ::Ice::Float Y;

    bool operator==(const PointF& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(X != __rhs.X)
        {
            return false;
        }
        if(Y != __rhs.Y)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PointF& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(X < __rhs.X)
        {
            return true;
        }
        else if(__rhs.X < X)
        {
            return false;
        }
        if(Y < __rhs.Y)
        {
            return true;
        }
        else if(__rhs.Y < Y)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PointF& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const PointF& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const PointF& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const PointF& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct FaceTriangle
{
    ::Ice::Int First;
    ::Ice::Int Second;
    ::Ice::Int Third;

    bool operator==(const FaceTriangle& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(First != __rhs.First)
        {
            return false;
        }
        if(Second != __rhs.Second)
        {
            return false;
        }
        if(Third != __rhs.Third)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FaceTriangle& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(First < __rhs.First)
        {
            return true;
        }
        else if(__rhs.First < First)
        {
            return false;
        }
        if(Second < __rhs.Second)
        {
            return true;
        }
        else if(__rhs.Second < Second)
        {
            return false;
        }
        if(Third < __rhs.Third)
        {
            return true;
        }
        else if(__rhs.Third < Third)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FaceTriangle& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FaceTriangle& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FaceTriangle& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FaceTriangle& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Eye
{
    ::Ice::Float x;
    ::Ice::Float y;

    bool operator==(const Eye& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Eye& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Eye& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Eye& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Eye& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Eye& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Ice::Byte> RGBImage;

enum DetailedFaceState
{
    isFace,
    noFace
};

typedef ::std::map< ::RoboCompMSKFace::FeaturePoint, ::RoboCompMSKFace::Vector3DF> Shape3D;

typedef ::std::map< ::RoboCompMSKFace::AnimationUnit, ::Ice::Float> animationUnitCoefficients;

typedef ::std::map< ::RoboCompMSKFace::FeaturePoint, ::RoboCompMSKFace::PointF> projected3DShape;

typedef ::std::vector< ::RoboCompMSKFace::FaceTriangle> triangles;

struct DetailedFace
{
    ::RoboCompMSKFace::Vector3DF translation;
    ::RoboCompMSKFace::Eye leftEye;
    ::RoboCompMSKFace::Eye rightEye;
    ::RoboCompMSKFace::Shape3D Shape3DFace;
    ::RoboCompMSKFace::animationUnitCoefficients animationCoefficients;
    ::RoboCompMSKFace::projected3DShape projected3DShapeMap;
    ::RoboCompMSKFace::triangles faceTriangles;
    ::Ice::Int left;
    ::Ice::Int right;
    ::Ice::Int top;
    ::Ice::Int bottom;
    ::Ice::Int height;
    ::Ice::Int width;
    ::Ice::Int identifier;
    bool invalid;
    ::Ice::Float yaw;
    ::Ice::Float pitch;
    ::Ice::Float roll;
    ::RoboCompMSKRGBD::TRGBImage faceImage;

    bool operator==(const DetailedFace& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(translation != __rhs.translation)
        {
            return false;
        }
        if(leftEye != __rhs.leftEye)
        {
            return false;
        }
        if(rightEye != __rhs.rightEye)
        {
            return false;
        }
        if(Shape3DFace != __rhs.Shape3DFace)
        {
            return false;
        }
        if(animationCoefficients != __rhs.animationCoefficients)
        {
            return false;
        }
        if(projected3DShapeMap != __rhs.projected3DShapeMap)
        {
            return false;
        }
        if(faceTriangles != __rhs.faceTriangles)
        {
            return false;
        }
        if(left != __rhs.left)
        {
            return false;
        }
        if(right != __rhs.right)
        {
            return false;
        }
        if(top != __rhs.top)
        {
            return false;
        }
        if(bottom != __rhs.bottom)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(identifier != __rhs.identifier)
        {
            return false;
        }
        if(invalid != __rhs.invalid)
        {
            return false;
        }
        if(yaw != __rhs.yaw)
        {
            return false;
        }
        if(pitch != __rhs.pitch)
        {
            return false;
        }
        if(roll != __rhs.roll)
        {
            return false;
        }
        if(faceImage != __rhs.faceImage)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DetailedFace& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(translation < __rhs.translation)
        {
            return true;
        }
        else if(__rhs.translation < translation)
        {
            return false;
        }
        if(leftEye < __rhs.leftEye)
        {
            return true;
        }
        else if(__rhs.leftEye < leftEye)
        {
            return false;
        }
        if(rightEye < __rhs.rightEye)
        {
            return true;
        }
        else if(__rhs.rightEye < rightEye)
        {
            return false;
        }
        if(Shape3DFace < __rhs.Shape3DFace)
        {
            return true;
        }
        else if(__rhs.Shape3DFace < Shape3DFace)
        {
            return false;
        }
        if(animationCoefficients < __rhs.animationCoefficients)
        {
            return true;
        }
        else if(__rhs.animationCoefficients < animationCoefficients)
        {
            return false;
        }
        if(projected3DShapeMap < __rhs.projected3DShapeMap)
        {
            return true;
        }
        else if(__rhs.projected3DShapeMap < projected3DShapeMap)
        {
            return false;
        }
        if(faceTriangles < __rhs.faceTriangles)
        {
            return true;
        }
        else if(__rhs.faceTriangles < faceTriangles)
        {
            return false;
        }
        if(left < __rhs.left)
        {
            return true;
        }
        else if(__rhs.left < left)
        {
            return false;
        }
        if(right < __rhs.right)
        {
            return true;
        }
        else if(__rhs.right < right)
        {
            return false;
        }
        if(top < __rhs.top)
        {
            return true;
        }
        else if(__rhs.top < top)
        {
            return false;
        }
        if(bottom < __rhs.bottom)
        {
            return true;
        }
        else if(__rhs.bottom < bottom)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(identifier < __rhs.identifier)
        {
            return true;
        }
        else if(__rhs.identifier < identifier)
        {
            return false;
        }
        if(invalid < __rhs.invalid)
        {
            return true;
        }
        else if(__rhs.invalid < invalid)
        {
            return false;
        }
        if(yaw < __rhs.yaw)
        {
            return true;
        }
        else if(__rhs.yaw < yaw)
        {
            return false;
        }
        if(pitch < __rhs.pitch)
        {
            return true;
        }
        else if(__rhs.pitch < pitch)
        {
            return false;
        }
        if(roll < __rhs.roll)
        {
            return true;
        }
        else if(__rhs.roll < roll)
        {
            return false;
        }
        if(faceImage < __rhs.faceImage)
        {
            return true;
        }
        else if(__rhs.faceImage < faceImage)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DetailedFace& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DetailedFace& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DetailedFace& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DetailedFace& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::Ice::Int, ::RoboCompMSKFace::DetailedFace> DetailedFaceMap;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompMSKFace::Vector3DF>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompMSKFace::Vector3DF, S>
{
    static void write(S* __os, const ::RoboCompMSKFace::Vector3DF& v)
    {
        __os->write(v.X);
        __os->write(v.Y);
        __os->write(v.Z);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKFace::Vector3DF, S>
{
    static void read(S* __is, ::RoboCompMSKFace::Vector3DF& v)
    {
        __is->read(v.X);
        __is->read(v.Y);
        __is->read(v.Z);
    }
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::FeaturePoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 120;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::AnimationUnit>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 5;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::PointF>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompMSKFace::PointF, S>
{
    static void write(S* __os, const ::RoboCompMSKFace::PointF& v)
    {
        __os->write(v.X);
        __os->write(v.Y);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKFace::PointF, S>
{
    static void read(S* __is, ::RoboCompMSKFace::PointF& v)
    {
        __is->read(v.X);
        __is->read(v.Y);
    }
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::FaceTriangle>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompMSKFace::FaceTriangle, S>
{
    static void write(S* __os, const ::RoboCompMSKFace::FaceTriangle& v)
    {
        __os->write(v.First);
        __os->write(v.Second);
        __os->write(v.Third);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKFace::FaceTriangle, S>
{
    static void read(S* __is, ::RoboCompMSKFace::FaceTriangle& v)
    {
        __is->read(v.First);
        __is->read(v.Second);
        __is->read(v.Third);
    }
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::Eye>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompMSKFace::Eye, S>
{
    static void write(S* __os, const ::RoboCompMSKFace::Eye& v)
    {
        __os->write(v.x);
        __os->write(v.y);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKFace::Eye, S>
{
    static void read(S* __is, ::RoboCompMSKFace::Eye& v)
    {
        __is->read(v.x);
        __is->read(v.y);
    }
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::DetailedFaceState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompMSKFace::DetailedFace>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 82;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompMSKFace::DetailedFace, S>
{
    static void write(S* __os, const ::RoboCompMSKFace::DetailedFace& v)
    {
        __os->write(v.translation);
        __os->write(v.leftEye);
        __os->write(v.rightEye);
        __os->write(v.Shape3DFace);
        __os->write(v.animationCoefficients);
        __os->write(v.projected3DShapeMap);
        __os->write(v.faceTriangles);
        __os->write(v.left);
        __os->write(v.right);
        __os->write(v.top);
        __os->write(v.bottom);
        __os->write(v.height);
        __os->write(v.width);
        __os->write(v.identifier);
        __os->write(v.invalid);
        __os->write(v.yaw);
        __os->write(v.pitch);
        __os->write(v.roll);
        __os->write(v.faceImage);
    }
};

template<class S>
struct StreamReader< ::RoboCompMSKFace::DetailedFace, S>
{
    static void read(S* __is, ::RoboCompMSKFace::DetailedFace& v)
    {
        __is->read(v.translation);
        __is->read(v.leftEye);
        __is->read(v.rightEye);
        __is->read(v.Shape3DFace);
        __is->read(v.animationCoefficients);
        __is->read(v.projected3DShapeMap);
        __is->read(v.faceTriangles);
        __is->read(v.left);
        __is->read(v.right);
        __is->read(v.top);
        __is->read(v.bottom);
        __is->read(v.height);
        __is->read(v.width);
        __is->read(v.identifier);
        __is->read(v.invalid);
        __is->read(v.yaw);
        __is->read(v.pitch);
        __is->read(v.roll);
        __is->read(v.faceImage);
    }
};

}

namespace RoboCompMSKFace
{

class Callback_MSKFaceEvent_newFaceAvailable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MSKFaceEvent_newFaceAvailable_Base> Callback_MSKFaceEvent_newFaceAvailablePtr;

class Callback_MSKFace_getFaces_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MSKFace_getFaces_Base> Callback_MSKFace_getFacesPtr;

}

namespace IceProxy
{

namespace RoboCompMSKFace
{

class MSKFaceEvent : virtual public ::IceProxy::Ice::Object
{
public:

    void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp)
    {
        newFaceAvailable(face, timestamp, 0);
    }
    void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::Context& __ctx)
    {
        newFaceAvailable(face, timestamp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_newFaceAvailable(face, timestamp, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newFaceAvailable(face, timestamp, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_newFaceAvailable(face, timestamp, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_newFaceAvailable(face, timestamp, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp)
    {
        return begin_newFaceAvailable(face, timestamp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::Context& __ctx)
    {
        return begin_newFaceAvailable(face, timestamp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newFaceAvailable(face, timestamp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newFaceAvailable(face, timestamp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::RoboCompMSKFace::Callback_MSKFaceEvent_newFaceAvailablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newFaceAvailable(face, timestamp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& face, ::Ice::Long timestamp, const ::Ice::Context& __ctx, const ::RoboCompMSKFace::Callback_MSKFaceEvent_newFaceAvailablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newFaceAvailable(face, timestamp, &__ctx, __del, __cookie);
    }

    void end_newFaceAvailable(const ::Ice::AsyncResultPtr&);
    
private:

    void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_secure(bool __secure) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_twoway() const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_oneway() const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_batchOneway() const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_datagram() const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_batchDatagram() const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_compress(bool __compress) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFaceEvent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MSKFaceEvent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MSKFace : virtual public ::IceProxy::Ice::Object
{
public:

    void getFaces(::RoboCompMSKFace::DetailedFaceMap& faces)
    {
        getFaces(faces, 0);
    }
    void getFaces(::RoboCompMSKFace::DetailedFaceMap& faces, const ::Ice::Context& __ctx)
    {
        getFaces(faces, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFaces(const ::IceInternal::Function<void (const ::RoboCompMSKFace::DetailedFaceMap&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFaces(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFaces(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFaces(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFaces(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::RoboCompMSKFace::DetailedFaceMap&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFaces(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFaces(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFaces(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFaces(const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::RoboCompMSKFace::DetailedFaceMap&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompMSKFace::DetailedFaceMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompMSKFace::MSKFacePrx __proxy = ::RoboCompMSKFace::MSKFacePrx::uncheckedCast(__result->getProxy());
                ::RoboCompMSKFace::DetailedFaceMap faces;
                try
                {
                    __proxy->end_getFaces(faces, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(faces);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompMSKFace::DetailedFaceMap&)> _response;
        };
        return begin_getFaces(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFaces()
    {
        return begin_getFaces(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context& __ctx)
    {
        return begin_getFaces(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFaces(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFaces(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::RoboCompMSKFace::Callback_MSKFace_getFacesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFaces(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context& __ctx, const ::RoboCompMSKFace::Callback_MSKFace_getFacesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFaces(&__ctx, __del, __cookie);
    }

    void end_getFaces(::RoboCompMSKFace::DetailedFaceMap& faces, const ::Ice::AsyncResultPtr&);
    
private:

    void getFaces(::RoboCompMSKFace::DetailedFaceMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MSKFace> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_secure(bool __secure) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_twoway() const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_oneway() const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_batchOneway() const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_datagram() const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_batchDatagram() const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_compress(bool __compress) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MSKFace> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MSKFace*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompMSKFace
{

class MSKFaceEvent : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class MSKFace : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void getFaces(::RoboCompMSKFace::DetailedFaceMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompMSKFace
{

class MSKFaceEvent : virtual public ::IceDelegate::RoboCompMSKFace::MSKFaceEvent,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class MSKFace : virtual public ::IceDelegate::RoboCompMSKFace::MSKFace,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void getFaces(::RoboCompMSKFace::DetailedFaceMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompMSKFace
{

class MSKFaceEvent : virtual public ::IceDelegate::RoboCompMSKFace::MSKFaceEvent,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap&, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class MSKFace : virtual public ::IceDelegate::RoboCompMSKFace::MSKFace,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void getFaces(::RoboCompMSKFace::DetailedFaceMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompMSKFace
{

class MSKFaceEvent : virtual public ::Ice::Object
{
public:

    typedef MSKFaceEventPrx ProxyType;
    typedef MSKFaceEventPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___newFaceAvailable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MSKFaceEvent& l, const MSKFaceEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MSKFaceEvent& l, const MSKFaceEvent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MSKFace : virtual public ::Ice::Object
{
public:

    typedef MSKFacePrx ProxyType;
    typedef MSKFacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getFaces(::RoboCompMSKFace::DetailedFaceMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFaces(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MSKFace& l, const MSKFace& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MSKFace& l, const MSKFace& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompMSKFace
{

template<class T>
class CallbackNC_MSKFaceEvent_newFaceAvailable : public Callback_MSKFaceEvent_newFaceAvailable_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MSKFaceEvent_newFaceAvailable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKFaceEvent_newFaceAvailable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKFaceEvent_newFaceAvailable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKFaceEvent_newFaceAvailable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKFaceEvent_newFaceAvailable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MSKFaceEvent_newFaceAvailable : public Callback_MSKFaceEvent_newFaceAvailable_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MSKFaceEvent_newFaceAvailable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKFaceEvent_newFaceAvailable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKFaceEvent_newFaceAvailable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKFaceEvent_newFaceAvailable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKFaceEvent_newFaceAvailablePtr
newCallback_MSKFaceEvent_newFaceAvailable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKFaceEvent_newFaceAvailable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MSKFace_getFaces : public Callback_MSKFace_getFaces_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompMSKFace::DetailedFaceMap&);

    CallbackNC_MSKFace_getFaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompMSKFace::MSKFacePrx __proxy = ::RoboCompMSKFace::MSKFacePrx::uncheckedCast(__result->getProxy());
        ::RoboCompMSKFace::DetailedFaceMap faces;
        try
        {
            __proxy->end_getFaces(faces, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(faces);
        }
    }

    Response response;
};

template<class T> Callback_MSKFace_getFacesPtr
newCallback_MSKFace_getFaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompMSKFace::DetailedFaceMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKFace_getFaces<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MSKFace_getFacesPtr
newCallback_MSKFace_getFaces(T* instance, void (T::*cb)(const ::RoboCompMSKFace::DetailedFaceMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MSKFace_getFaces<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MSKFace_getFaces : public Callback_MSKFace_getFaces_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompMSKFace::DetailedFaceMap&, const CT&);

    Callback_MSKFace_getFaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompMSKFace::MSKFacePrx __proxy = ::RoboCompMSKFace::MSKFacePrx::uncheckedCast(__result->getProxy());
        ::RoboCompMSKFace::DetailedFaceMap faces;
        try
        {
            __proxy->end_getFaces(faces, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(faces, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MSKFace_getFacesPtr
newCallback_MSKFace_getFaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompMSKFace::DetailedFaceMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKFace_getFaces<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MSKFace_getFacesPtr
newCallback_MSKFace_getFaces(T* instance, void (T::*cb)(const ::RoboCompMSKFace::DetailedFaceMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MSKFace_getFaces<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
