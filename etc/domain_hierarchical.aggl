spacePattern=3
lineThickness=2
fontName=Arial
name=domain
vertexDiameter=40
shortPattern=1
nodeThickness=2
fontSize=12
longPattern=3
===

include(/home/robocomp/robocomp/components/robocomp-ursus-rockin/etc/domain_basic.aggl)

findGrannyAndDeliver : active(1)
{
	findGranny as find
	deliverObject as deliver
	where:
	deliver.robot = find.robot
	deliver.room = find.room
	deliver.person = find.person
}

reachAndGrasp : active(1)
{
	setObjectReach as reach
	graspObject as grasp
	where:
	reach.object = grasp.object
	reach.status = grasp.status
}

findMilk : active(1)
{
	findObjectVisuallyInTable as find
	recognizeObjFails as fail
	tellHumanAboutUnknownObject as tell
	personClassifiesMilkPot as milk
	where:
	find.status = fail.status = tell.statusr = milk.statusr
	find.object = fail.object = tell.objectr = milk.objectr
	find.robot = fail.robot = tell.robot = milk.robot
	tell.person = milk.person
	tell.objecth = milk.objecth
	tell.statush = milk.statush
}

hierarchical hierarchicalFindMilkInTable : active(1)
{
	{
		contst:objectSt(95,110)
		container:object(-130,110)
		robot:robot(-325,0)
		room:object(-325,110)
		container->contst(table)
		robot->container(know)
		robot->room(in)
		container->room(in)
		container->contst(explored)*
	}
	=>
	{
		status:objectSt(95,0)
		object:object(-130,0)
		container:object(-130,110)
		room:object(-325,110)
		contst:objectSt(95,110)
		robot:robot(-325,0)
		container->contst(table)
		robot->object(know)
		object->status(see)
		object->status(classified)
		object->status(milk)
		object->status(reach)
		object->status(position)
		object->status(reachable)
		object->status(hasStatus)
		object->container(in)
		robot->container(know)
		robot->room(in)
		container->room(in)
		container->contst(explored)*
	}
	effect
	{
		(forall
			something:object
			(when
				(in container something)
				(in object something)
			)
		)
	}
}

hierarchical hierarchicalFindMugInTable : active(1)
{
	{
		contst:objectSt(95,110)
		container:object(-130,110)
		robot:robot(-325,0)
		room:object(-325,110)
		container->contst(explored)*
		container->contst(table)
		robot->container(know)
		robot->room(in)
		container->room(in)
	}
	=>
	{
		status:objectSt(95,0)
		object:object(-130,0)
		container:object(-130,110)
		room:object(-325,110)
		contst:objectSt(95,110)
		robot:robot(-325,0)
		container->contst(explored)*
		container->contst(table)
		robot->object(know)
		object->status(see)
		object->status(classified)
		object->status(mug)
		object->status(reach)
		object->status(position)
		object->status(reachable)
		object->status(hasStatus)
		object->container(in)
		robot->container(know)
		robot->room(in)
		container->room(in)
	}
	effect
	{
		(forall
			something:object
			(when
				(in container something)
				(in object something)
			)
		)
	}
}
