spacePattern=3
lineThickness=2
fontName=Arial
name=domain_basic
vertexDiameter=40
shortPattern=1
nodeThickness=2
fontSize=12
longPattern=3
===
changeRoom : active(1)
{
	{
		s2:roomSt(25,75)
		s1:roomSt(-200,75)
		r1:object(-200,-35)
		r2:object(25,-35)
		robot:robot(-95,-145)
		robot->r1(in)
		r1->r2(transitable)
		r1->s1(room)
		r2->s2(room)
	}
	=>
	{
		s2:roomSt(25,75)
		s1:roomSt(-200,75)
		r1:object(-200,-35)
		r2:object(25,-35)
		robot:robot(-95,-145)
		robot->r2(in)
		r1->r2(transitable)
		r1->s1(room)
		r2->s2(room)
	}
	effect
	{
		(forall
			something:object
			(when
				(in something robot)
				(and
					(not (in something s1))
					(in something s2)
				)
			)
		)
	}
}


findObjectVisuallyInTable : active(1)
{
	{
		contst:objectSt(95,110)
		container:object(-130,110)
		robot:robot(-325,0)
		room:object(-325,110)
		container->contst(explored)*
		container->contst(table)
		container->contst(reach)
		robot->container(know)
		robot->room(in)
		container->room(in)
	}
	=>
	{
		status:objectSt(95,0)
		object:object(-130,0)
		container:object(-130,110)
		room:object(-325,110)
		contst:objectSt(95,110)
		robot:robot(-325,0)
		container->contst(explored)*
		container->contst(table)
		container->contst(reach)
		robot->object(know)
		object->status(see)
		object->status(unclassified)
		object->status(noReach)
		object->status(position)
		object->status(reachable)
		object->status(hasStatus)
		object->container(in)
		robot->container(know)
		robot->room(in)
		container->room(in)
	}
}


findGranny : active(1)
{
	{
		person:person(-15,-75)
		roomSt:roomSt(200,50)
		robot:robot(-190,-75)
		personSt:personSt(200,-75)
		room:object(-15,50)
		robot->person(know)
		person->personSt(granny)
		person->personSt(noLocalized)
		robot->room(in)
		room->roomSt(room)
		room->roomSt(noExplored)
	}
	=>
	{
		person:person(-15,-75)
		roomSt:roomSt(200,55)
		robot:robot(-190,-75)
		personSt:personSt(200,-75)
		room:object(-15,55)
		robot->person(know)
		person->personSt(granny)
		person->room(in)
		person->personSt(localized)
		robot->room(in)
		room->roomSt(room)
		room->roomSt(noExplored)
	}
	effect
	{
		(forall
			aRoom:object
			aRoomSt:roomSt
			(and
				(not (explored aRoom aRoomSt))
				(noExplored aRoom aRoomSt)
			)
		)
	}
}


recognizeObjGlasses : active(1)
{
	{
		status:objectSt(65,-75)
		object:object(-130,-75)
		robot:robot(-290,-75)
		robot->object(know)
		object->status(hasStatus)
		object->status(see)
		object->status(position)
		object->status(unclassified)
	}
	=>
	{
		status:objectSt(60,-75)
		object:object(-130,-75)
		robot:robot(-290,-75)
		robot->object(know)
		object->status(hasStatus)
		object->status(see)
		object->status(position)
		object->status(classified)
		object->status(glasses)
	}
}


setRoomExplored : passive(1)
{
	{
		status:roomSt(250,0)
		object:object(0,0)
		object->status(noExplored)
	}
	=>
	{
		status:roomSt(250,0)
		object:object(0,0)
		object->status(explored)
	}
}

setRoomNotExplored : passive(1)
{
	{
		status:roomSt(250,0)
		object:object(0,0)
		object->status(explored)
	}
	=>
	{
		status:roomSt(250,0)
		object:object(0,0)
		object->status(noExplored)
	}
}

setObjectReach : active(1)
{
	{
		status:objectSt(250,0)
		object:object(65,0)
		robot:robot(-205,0)
		room:object(-70,0)
		object->status(hasStatus)
		object->status(noReach)
		object->status(reachable)
		object->room(in)
		robot->room(in)
	}
	=>
	{
		status:objectSt(250,0)
		object:object(65,0)
		robot:robot(-205,0)
		room:object(-70,0)
		object->status(hasStatus)
		object->status(reach)
		object->status(reachable)
		object->room(in)
		robot->room(in)
	}
}

setObjectNotReach : passive(1)
{
	{
		status:objectSt(250,-40)
		object:object(50,-40)
		object->status(hasStatus)
		object->status(reach)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(50,-40)
		object->status(hasStatus)
		object->status(noReach)
	}
}

setObjectReachable : passive(1)
{
	{
		status:objectSt(250,-40)
		object:object(35,-40)
		object->status(hasStatus)
		object->status(noReachable)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(55,-40)
		object->status(hasStatus)
		object->status(reachable)
	}
}

setObjectNotReachable : passive(1)
{
	{
		status:objectSt(285,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(reachable)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(35,-45)
		object->status(hasStatus)
		object->status(noReachable)
	}
}

graspObject : active(1)
{
	{
		table:object(0,110)
		object:object(130,0)
		room:object(-130,0)
		robot:robot(0,-110)
		ost:objectSt(290,0)
		robot->object(know)
		object->table(in)
		robot->room(in)
		table->room(in)
		object->ost(reach)
	}
	=>
	{
		table:object(0,110)
		object:object(130,0)
		room:object(-130,0)
		robot:robot(0,-110)
		ost:objectSt(290,0)
		robot->object(know)
		object->robot(in)
		robot->room(in)
		table->room(in)
		object->ost(reach)
	}
}

handObject : active(1)
{
	{
		person:person(0,110)
		object:object(130,0)
		robot:robot(0,-110)
		room:object(-130,0)
		robot->object(know)
		object->robot(in)
		robot->room(in)
		person->room(in)
	}
	=>
	{
		person:person(0,110)
		object:object(130,0)
		robot:robot(0,-110)
		room:object(-130,0)
		robot->object(know)
		object->person(in)
		robot->room(in)
		person->room(in)
	}
}

leaveObject : active(1)
{
	{
		table:object(0,110)
		object:object(130,0)
		robot:robot(0,-110)
		room:object(-130,0)
		robot->object(know)
		object->robot(in)
		robot->room(in)
		table->room(in)
	}
	=>
	{
		table:object(0,110)
		object:object(130,0)
		robot:robot(0,-110)
		room:object(-130,0)
		robot->object(know)
		object->table(in)
		robot->room(in)
		table->room(in)
	}
}

setObjectSee : active(1)
{
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(noSee)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(see)
	}
}

setObjectNotSee : passive(1)
{
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(see)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(noSee)
	}
}

setObjectPosition : active(1)
{
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(noPosition)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(position)
	}
}

setObjectNotPosition : passive(1)
{
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(position)
	}
	=>
	{
		status:objectSt(250,-40)
		object:object(80,-40)
		object->status(hasStatus)
		object->status(noPosition)
	}
}


